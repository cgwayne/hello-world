<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>Untitled Document</title>
</head>

<body>

<br /><a href="[!--$wcmUrl('link','2162236')--]">JDK Release Notes</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="[!--$wcmUrl('link','2153846')--]">JDK 9 Release Notes</a><br />
<hr />
<h1>Notes, Changes, and Known Issues for JDK 9</h1>
<br />
<br />This section describes deprecated and removed features and options, important notes, important new features and changes, noteworthy fixed issues, and the known issues in this release.<br />
<ul>
    <li>
    <br /><a href="#DeprecatedFeaturesOptions-jdk9">Deprecated Features and Options</a><br />
    </li>
    <li>
    <br /><a href="#RemovedFeaturesOptions-jdk9">Removed Features and Options</a><br />
    </li>
    <li>
    <br /><a href="#Notes-jdk9">Notes</a><br />
    </li>
    <li>
    <br /><a href="#NewFeatures-jdk9">New Features</a><br />
    </li>
    <li>
    <br /><a href="#Changes-jdk9">Changes</a><br />
    </li>
    <li>
    <br /><a href="#IssuesFixed-jdk9">Issues Fixed</a><br />
    </li>
    <li>
    <br /><a href="#KnownIssues-jdk9">Known Issues</a><br />
    </li>
</ul>
<hr />
<a id="DeprecatedFeaturesOptions-jdk9" name="DeprecatedFeaturesOptions-jdk9"></a><h2>Deprecated Features and Options</h2>
<br /><br /><span style="font-family: Courier New">core-libs/java.lang</span><br />
<strong>Deprecation Warnings</strong><br />Several APIs have been deprecated in Java SE 9. This will cause <code>javac</code> to emit a variety of warnings during compilation. A <em>deprecation</em> warning will be emitted at the use site of an API deprecated with <code>forRemoval=false</code>. A <em>removal</em> warning will be emitted at the use site of an API deprecated with <code>forRemoval=true</code>.<br />
<br />A deprecation or removal warning is a recommendation that code be migrated away from the deprecated API. A removal warning is particularly strenuous, as it is an indication that the deprecated API will generally be removed from the next major release of the platform. However, it is not always practical to migrate code immediately. Therefore, two mechanisms have been provided for controlling the warnings that are emitted by <code>javac</code>: command-line options and annotations in source code.<br />
<br />The <code>javac</code> command-line options <code>-Xlint:deprecation</code> and <code>-Xlint:removal</code> will enable the respective warning types, and <code>-Xlint:-deprecation</code> and <code>-Xlint:-removal</code> will disable the respective warning types. Note that removal warnings are enabled by default.<br />
<br />The other mechanism is to add the <code>@SuppressWarnings(&quot;deprecation&quot;)</code> or <code>@SuppressWarnings(&quot;removal&quot;)</code> annotation to the source code. This annotation can be added at the declaration of a module, class, method, field, or local variable to suppress the respective warning types emitted within that declaration.<br />
<br />For further information about deprecation, see <a href="http://openjdk.java.net/jeps/277">JEP 277</a> and the documentation for the <code>java.lang.Deprecated</code> annotation type.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8065614">JDK-8065614</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">client-libs/java.awt</span><br />
<strong>AppletViewer is deprecated</strong><br />The AppletViewer tool was deprecated as a part of &quot;JEP C161: Deprecate the Java Plug-in&quot;, and its use isn't recommended,<br />
<br />More information about AppletViewer: http://docs.oracle.com/javase/8/docs/technotes/tools/windows/appletviewer.html<br />
JDK-8074165 (not public) <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/java.security</span><br />
<strong>Deprecate policytool</strong><br />The <code>policytool</code> security tool is moved into the <code>jdk.policytool</code> module and has been deprecated.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8147400">JDK-8147400</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.lang</span><br />
<strong>Deprecate Object.finalize</strong><br />The <code>java.lang.Object.finalize</code> method has been deprecated. The finalization mechanism is inherently problematic and can lead to performance issues, deadlocks, and hangs. The <code>java.lang.ref.Cleaner</code> and <code>java.lang.ref.PhantomReference</code> provide more flexible and efficient ways to release resources when an object becomes unreachable. For further information, please see the <code>java.lang.Object.finalize</code> method specification.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8165641">JDK-8165641</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/javax.net.ssl</span><br />
<strong>Deprecate the javax.security.cert API</strong><br />The javax.security.cert API has been deprecated. The classes in this package should no longer be used. The java.security.cert package contains suitable replacements.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8157712">JDK-8157712</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/java.security</span><br />
<strong>Deprecate the com.sun.jarsigner package</strong><br />The <code>com.sun.jarsigner</code> package is now deprecated. This includes the <code>ContentSigner</code> class, the <code>ContentSignerParameters</code> interface, and the jarsigner command's &quot;-altsigner&quot; and &quot;-altsignerpath&quot; options.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8076535">JDK-8076535</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.util:i18n</span><br />
<strong>Deprecate ResourceBundleControlProvider for removal</strong><br />The Java Extension Mechanism has been removed and there is no longer a way to load the custom ResourceBundle.Control implementations through this SPI, as ResourceBundle.getBundle() is using ServiceLoader.loadInstalled() to locate them. A work around to achieve the old behavior is to explicitly pass a ResourceBundle.Control instance to ResourceBundle::getBundle<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8171189">JDK-8171189</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/java.security</span><br />
<strong>Deprecate the java.security.acl API</strong><br />The java.security.acl API has been deprecated. The classes in this package should no longer be used. The java.security package contains suitable replacements. See Policy and related classes for details.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8157847">JDK-8157847</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.lang</span><br />
<strong>Deprecation of Boxed Primitive Constructors</strong><br />Classes <code>Boolean</code>, <code>Byte</code>, <code>Short</code>, <code>Character</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, and <code>Double</code> are &quot;box&quot; classes that correspond to primitive types. The constructors of these classes have been deprecated.<br />
<br />Given a value of the corresponding primitive type, it is generally unnecessary to construct new instances of these box classes. The recommended alternatives to construction are autoboxing or the <code>valueOf</code> static factory methods. In most cases, autoboxing will work, so an expression whose type is a primitive can be used in locations where a box class is required. This is covered in the <em>Java Language Specification</em>, section 5.1.7, &quot;Boxing Conversion.&quot; For example, given <code>List&lt;Integer&gt; intList</code>, the code to add an <code>Integer</code> might be as follows:<br />
<pre><code>    intList.add(new Integer(347)); </code></pre>
<br />This can be replaced with:<br />
<pre><code>    intList.add(347); </code></pre>
<br />Autoboxing should not be used in places where it might affect overload resolution. For example, there are two overloads of the <code>List.remove</code> method:<br />
<pre><code>    List.remove(int i)        // removes the element at index i     List.remove(Object obj)   // removes an element equal to obj </code></pre>
<br />The code to remove the <code>Integer</code> value 347 might be as follows:<br />
<pre><code>    intList.remove(new Integer(347)); </code></pre>
<br />If this code is changed in an attempt to use autoboxing:<br />
<pre><code>    intList.remove(347); </code></pre>
<br />This will not remove the <code>Integer</code> value 347, but instead it will resolve to the other overloaded method, and it will attempt to remove the element at index 347.<br />
<br />Autoboxing cannot be used in such cases. Instead, code should be changed to use the <code>valueOf</code> static factory method:<br />
<pre><code>    intList.remove(Integer.valueOf(347)); </code></pre>
<br />Autoboxing is preferable from a readability standpoint, but a safer transformation is to replace calls to the box constructors with calls to the <code>valueOf</code> static factory method.<br />
<br />Using autoboxing or the <code>valueOf</code> method reduces memory footprint compared to the constructors, as the integral box types will generally cache and reuse instances corresponding to small values. The special case of <code>Boolean</code> has static fields for the two cached instances, namely <code>Boolean.FALSE</code> and <code>Boolean.TRUE</code>.<br />
<br />With the exception of <code>Character</code>, the box classes also have constructors that take a <code>String</code> argument. These parse and convert the string value and return a new instance of the box class. A <code>valueOf</code> overload taking a <code>String</code> is the equivalent static factory method for this constructor. Usually it's preferable to call one of the <code>parse</code> methods (<code>Integer.parseInt</code>, <code>Double.parseDouble</code>, etc.) which convert the string and return primitive values instead of boxed instances.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8065614">JDK-8065614</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/gc</span><br />
<strong>AutoGCSelectPauseMillis has been deprecated</strong><br />This option was deprecated in JDK 9, following the deprecation of the -XX:+UseAutoGCSelectPolicy option.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8166461">JDK-8166461</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">docs</span><br />
<strong>Options -d32 and -d64 are deprecated</strong><br />The java launcher's data model switches, -d32 and -d64, were used primarily on Solaris platforms. With the removal of 32-bit JDK/JRE on Solaris in JDK8, these options are now obsolete and will be removed in a future release, causing the launcher to fail with an invalid option.<br />
JDK-8168826 (not public) <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/java.security</span><br />
<strong>Deprecate the java.security.Certificate API with forRemoval=true</strong><br />The deprecated java.security.Certificate API has been marked with forRemoval=true. The class should no longer be used and is subject to removal in a future version of Java SE.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8157707">JDK-8157707</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/javax.net.ssl</span><br />
<strong>Deprecate methods that reference javax.security.cert APIs</strong><br />The java.net.ssl.HandshakeCompletedEvent.getPeerCertificateChain and java.net.ssl.SSLSession.getPeerCertificateChain methods have been deprecated. New applications should use the getPeerCertificates method instead.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8161898">JDK-8161898</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">javafx/application-lifecycle</span><br />
<strong>Deprecate HostServices.getWebContext method with forRemoval=true</strong><br />The HostServices.getWebContext method is deprecated in JDK 9 and is marked as forRemoval=true indicating that it will be removed in a future version of the JDK. Applets are deprecated in JDK 9, and this method is only used when running an FX application as an Applet in a browser.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8156963">JDK-8156963</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/gc</span><br />
<strong>UseAutoGCSelectPolicy has been deprecated</strong><br />This option was deprecated in JDK 9, along with the -XX:AutoGCSelectPauseMillis option.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8166461">JDK-8166461</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">tools/javac</span><br />
<strong>Compiler will emit a warning if deprecated javadoc tag is used without @Deprecated annotation</strong><br />If the javadoc deprecated tag is used on an element without it also being deprecated using the @Deprecated annotation, the compiler will by default produce a new warning to this effect.<br />
<br />The new warning can be suppressed either by adding the command line option -Xlint:-dep-ann to the javac command line or by using @SuppressWarnings(&quot;dep-ann&quot;) annotation (as with any other warning-suppressing annotation, it is always a good practice to add such an annotation as close to the member being deprecated as possible).<br />
<br />In a future version of Java SE, the compiler may no longer treat @deprecated javadoc tag as indicating formal deprecation.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8164073">JDK-8164073</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs</span><br />
<strong>Deprecate the java.security.{Identity,IdentityScope,Signer} APIs with forRemoval=true</strong><br />The deprecated java.security.Identity, java.security.IdentityScope and java.security.Signer classes have been marked with 'forRemoval=true'. These classes should no longer be used and are subject to removal in a future version of Java SE.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8157730">JDK-8157730</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/java.security</span><br />
<strong>Deprecate pre-1.2 SecurityManager methods and fields with forRemoval=true</strong><br />The following pre-1.2 deprecated java.lang.SecurityManager methods and fields have been marked with forRemoval=true: the inCheck field, and the getInCheck, classDepth, classLoaderDepth, currentClassLoader, currentLoadedClass, inClass, and inClassLoader methods. This field and methods should no longer be used and are subject to removal in a future version of Java SE.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8161506">JDK-8161506</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">tools/javadoc(tool)</span><br />
<strong>The old standard doclet is deprecated and will be removed in a future release</strong><br />The standard doclet is the doclet in the JDK that produces the default HTML-formatted API output. The version that was available in previous releases (com.sun.tools.doclets.standard.Standard) has been replaced by a new version (jdk.javadoc.doclet.Standard). The old version is now deprecated and is subject to removal in a future version of Java SE. For more details, see <a href="http://openjdk.java.net/jeps/221">JEP 221</a>. For more details on the new Doclet API, see [the right external URL].<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8177484">JDK-8177484</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/java.security</span><br />
<strong>Deprecate security APIs that have been superseded</strong><br />The classes and interfaces in the <code>java.security.acl</code> and <code>javax.security.cert</code> packages have been superseded by replacements for a long time and are deprecated in JDK 9. Two methods <code>javax.net.ssl.HandshakeCompletedEvent.getPeerCertificateChain()</code> and <code>javax.net.ssl.SSLSession.getPeerCertificateChain()</code> are also deprecated since they return the <code>javax.security.cert.X509Certificate</code> type.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8073430">JDK-8073430</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">javafx/media</span><br />
<strong>VP6 video and FXM/FLV container are deprecated</strong><br />Support for VP6 video encoding format and FXM/FLV container are deprecated in JavaFX Media and it will be removed in a future release. Users encouraged to use H.264/AVC1 in MP4 container or HTTP Live Streaming instead.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8134330">JDK-8134330</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">deploy</span><br />
<strong>ability to double-jar class files deprecated</strong><br />The ability to double-jar (jarjar) a set of class files in Java deployment technologies has been deprecated. The following warning will be issued if a jarjar file is downloaded:<br />
<br />&quot;WARNING: A jarjar file has been loaded. Jarjar files are deprecated and will be removed in a future Java release. This application may not function properly in the future. Jarjar file URL: {URL}&quot;<br />
JDK-8074157 (not public) <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/gc</span><br />
<strong>JEP C175 Deprecate the Concurrent Mark Sweep (CMS) Garbage Collector in Oracle builds</strong><br />The CMS garbage collector was deprecated in JDK 9. For more information, see <a href="http://www.oracle.com/pls/topic/lookup?ctx=javase9&amp;id=JSWOR624"><code>-XX:+UseConcMarkSweepGC</code></a><br />
JDK-8162744 (not public) <br />
<br />
<br />



<a id="RemovedFeaturesOptions-jdk9" name="RemovedFeaturesOptions-jdk9"></a><h2>Removed Features and Options</h2>
<br />
<br /><span style="font-family: Courier New">core-libs/java.nio</span><br />
<strong>sun.nio.sh.PollSelectorProvider removed</strong><br />Superior SelectorProvider implementations exist for all Oracle JDK platforms and PollSelectorProvider should not be used on those platforms if at all possible. That being the case we're removing it from the build on all Oracle supported platforms while leaving the source in the repo for reference purposes.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8142872">JDK-8142872</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">other-libs</span><br />
<strong>Removal of com.apple.concurrent.Dispatch</strong><br />The <code>com.apple.concurrent.Dispatch</code> API was a Mac-only API and was carried into JDK 7u4 with the port of Apple's JDK 6 code. This seldom-used and unsupported API will be removed from JDK 9. The standard <code>java.util.concurrent.Executor</code> and <code>java.util.concurrent.ExecutorService</code> implementations remain available for use.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8148187">JDK-8148187</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/javax.security</span><br />
<strong>Remove com.sun.security.auth.callback.DialogCallbackHandler</strong><br />The <code>com.sun.security.auth.callback.DialogCallbackHandler</code> class has been removed. This class, which is in the JDK-specific extensions to JAAS, was deprecated in JDK 8 and previously flagged for removal.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8029904">JDK-8029904</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/compiler</span><br />
<strong>Remove Use486InstrsOnly flag</strong><br />The <code>-XX:+Use486InstrsOnly</code> flag has been removed because it is no longer supported.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-6808665">JDK-6808665</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/compiler</span><br />
<strong>Remove BackEdgeThreshold flag</strong><br />The <code>-XX:BackEdgeThreshold</code> flag has been removed because it is no longer supported. Users now need to use <code>-XX:OnStackReplacePercentage</code> instead.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8021770">JDK-8021770</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/compiler</span><br />
<strong>Remove SafepointPollOffset flag</strong><br />The <code>-XX:SafepointPollOffset</code> flag has been removed because it was introduced only to reproduce a problem with the C1 compiler and is no longer needed.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8031203">JDK-8031203</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/compiler</span><br />
<strong>Remove EnableInvokeDynamic flag</strong><br />The <code>-XX:EnableInvokeDynamic</code> flag has been removed because the VM does no longer support execution without invokedynamic.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8036956">JDK-8036956</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">client-libs/2d</span><br />
<strong>Remove the com.sun.image.codec.jpeg package</strong><br />com.sun.image.codec.jpeg has been shipped as a non-standard API since JDK v1.2. It was always advertised as a stop-gap measure until a proper standard equivalent was provided. That replacement (javax.imageio) has been there since JDK 1.4. As a result JDK 9 finally removes the long deprecated <code>com.sun.image.codec.jpeg</code> API which has been flagged as intended for removal for several releases. Applications which still depend on it will need to be re-coded in order to run on JDK9.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8038838">JDK-8038838</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">tools</span><br />
<strong>Removal of native2ascii tool</strong><br />native2ascii tool is removed in JDK 9. JDK 9 supports UTF-8 based properties resource bundles (see <a href="http://openjdk.java.net/jeps/226">JEP 226</a>) and the conversion for UTF-8 based properties resource bundles to ISO-8859-1 is no longer needed.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8074431">JDK-8074431</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">tools</span><br />
<strong>extcheck tool removed</strong><br />The <code>extcheck</code> tool has been removed in this release.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8042888">JDK-8042888</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/runtime</span><br />
<strong>JVM_GetComponentType Was Removed</strong><br />The <code>JVM_GetComponentType</code> entry point has been removed from HotSpot. The JDK 9 library function <code>java/lang/Class.getComponentType</code> accesses a field in the instance of <code>java/lang/Class</code> directly. The HotSpot Java Virtual Machine initializes this value.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8047737">JDK-8047737</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/javax.crypto</span><br />
<strong>Remove the ExemptionMechanism.finalize() method</strong><br />The javax.crypto.ExemptionMechanism.finalize() method has been removed from both the specification and the implementation.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8159009">JDK-8159009</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-svc</span><br />
<strong>com.sun.tracing APIs are removed</strong><br />The following unsupported APIs are removed:<br />
<ul>
    <li>com.sun.tracing</li>
    <li>com.sun.tracing.dtrace</li>
</ul>
</div>
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8062303">JDK-8062303</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-svc/tools</span><br />
<strong>jhat tool removed.</strong><br />Experimental jhat tool has been removed.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8059039">JDK-8059039</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-svc/tools</span><br />
<strong>management-agent.jar is removed.</strong><br />management-agent.jar has been removed. Tools that have been using the Attach API to load this agent into a running VM should be aware that the Attach API has been updated in JDK 9 to define two new methods for starting a management agent:<br />
<ul>
    <li>com.sun.tools.attach.VirtualMachine.startManagementAgent(Properties agentProperties)</li>
    <li>com.sun.tools.attach.VirtualMachine.startLocalManagementAgent()</li>
</ul>
</div>
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8043939">JDK-8043939</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/runtime</span><br />
<strong>Removal of rarely used sun.misc.Unsafe methods</strong><br />The methods monitorEnter, monitorExit and tryMonitorEnter on sun.misc.Unsafe are removed in JDK 9. These methods are not used within the JDK itself and are very rarely used outside of the JDK.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8054494">JDK-8054494</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/compiler</span><br />
<strong>Remove per-compiler performance counters</strong><br />Per-thread compiler performance counters have been removed because they became obsolete in the presence of more fine-grained and precise compilation events. The corresponding interface in <code>sun.management.*</code> has been deprecated since it will no longer provide information without the performance counters. Users can get similar or more fine-grained information via global performance counters, the event tracing API (JFR) or <code>-XX:+PrintCompilation</code>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8134607">JDK-8134607</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/compiler</span><br />
<strong>Remove obsolete Unsafe.putOrdered{X} methods</strong><br />The <code>putOrderedObject</code>, <code>putOrderedInt</code> and <code>putOrderedLong</code> methods have been removed from <code>jdk.internal.misc.Unsafe</code> because they became obsolete with the introduction of VarHandles. Their uses have been replaced by <code>putObjectRelease</code>, <code>putIntRelease</code> and <code>putLongRelease</code> from <code>jdk.internal.misc.Unsafe</code>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8152698">JDK-8152698</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.rmi</span><br />
<strong>Remove HTTP proxying from RMI</strong><br />The mechanism of proxying RMI requests through HTTP, which was deprecated in Java SE 8, has been removed in Java SE 9. This mechanism used a web CGI script called <code>java-rmi.cgi</code>. This script has also been removed. The default mechanism for transmitting RMI requests is now simply a direct socket connection.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8066750">JDK-8066750</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.io:serialization</span><br />
<strong>serialver -show option is removed</strong><br />The <code>-show</code> option to <code>serialver</code> has been removed in this release.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8042887">JDK-8042887</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.net</span><br />
<strong>The netdoc URL protocol Handler is removed</strong><br />The <code>netdoc</code> protocol handler has been removed in JDK 9. Code that attempts to construct a <code>java.net.URL</code> with the <code>netdoc</code> protocol, for example &quot;netdoc:http://foo.com/index.html&quot; will throw a <code>MalformedURLException</code>.<br />
<br />The <code>netdoc</code> protocol was used to point to network documents either on the local file system or externally through an HTTP URL. This capability is essentially defunct and is not supported by Safari, Firefox, and other major browsers.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8154234">JDK-8154234</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/runtime</span><br />
<strong>Remove Deprecated sun.misc.Unsafe Methods</strong><br />The deprecated methods on <code>sun.misc.Unsafe</code> are removed in JDK 9. These methods are not used within the JDK itself.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8068975">JDK-8068975</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/runtime</span><br />
<strong>Many Unused VM Interfaces Removed</strong><br />In this release, a number of VM interfaces have been removed, either because the JDK was not using them anymore or because the service they provided was also available in JDK native libraries. The removed VM interfaces are listed below:<br />
<pre><code>void JVM_OnExit(void (*func)(void); void JVM_Exit(jint code); void JVM_TraceInstructions(jboolean on); void JVM_TraceMethodCalls(jboolean on); jboolean JVM_IsNaN(jdouble d); void JVM_InitializeCompiler(JNIEnv *env, jclass compCls); jboolean JVM_IsSilentCompiler(JNIEnv *env, jclass compCls); jboolean JVM_CompileClass(JNIEnv *env, jclass compCls, jclass cls); jboolean JVM_CompileClasses(JNIEnv *env, jclass cls, jstring jname); jobject JVM_CompilerCommand(JNIEnv *env, jclass compCls, jobject arg); void JVM_EnableCompiler(JNIEnv *env, jclass compCls); void JVM_DisableCompiler(JNIEnv *env, jclass compCls); jobject JVM_AllocateNewObject(JNIEnv *env, jobject obj, jclass currClass, jclass initClass); jobject JVM_AllocateNewArray(JNIEnv *env, jobject obj, jclass currClass, jint length); jclass JVM_LoadClass0(JNIEnv *env, jobject obj, jclass currClass, jstring currClassName); void JVM_ResolveClass(JNIEnv *env, jclass cls); jbyteArray JVM_GetFieldAnnotations(JNIEnv *env, jobject field); jbyteArray JVM_GetMethodAnnotations(JNIEnv *env, jobject method); jbyteArray JVM_GetMethodDefaultAnnotationValue(JNIEnv *env, jobject method); jbyteArray JVM_GetMethodParameterAnnotations(JNIEnv *env, jobject method); jboolean JVM_CX8Field(JNIEnv *env, jobject obj, jfieldID fldID, jlong oldVal, jlong newVal); jint JVM_GetLastErrorString(char *buf, int len); jint JVM_Open(const char *fname, jint flags, jint mode); jint JVM_Close(jint fd); jint JVM_Read(jint fd, char *buf, jint nbytes); jint JVM_Write(jint fd, char *buf, jint nbytes); jint JVM_Available(jint fd, jlong *pbytes); jlong JVM_Lseek(jint fd, jlong offset, jint whence); jint JVM_SetLength(jint fd, jlong length); jint JVM_Sync(jint fd); jint JVM_InitializeSocketLibrary(void); jint JVM_Socket(jint domain, jint type, jint protocol); jint JVM_SocketClose(jint fd); jint JVM_SocketShutdown(jint fd, jint howto); jint JVM_Recv(jint fd, char *buf, jint nBytes, jint flags); jint JVM_Send(jint fd, char *buf, jint nBytes, jint flags); jint JVM_Timeout(int fd, long timeout); jint JVM_Listen(jint fd, jint count); jint JVM_Connect(jint fd, struct sockaddr *him, jint len); jint JVM_Bind(jint fd, struct sockaddr *him, jint len); jint JVM_Accept(jint fd, struct sockaddr *him, jint *len); jint JVM_RecvFrom(jint fd, char *buf, int nBytes, int flags, struct sockaddr *from, int *fromlen); jint JVM_GetSockName(jint fd, struct sockaddr *him, int *len); jint JVM_GetSockOpt(jint fd, int level, int optname, char *optval, int *optlen); jint JVM_SetSockOpt(jint fd, int level, int optname, const char *optval, int optlen); int JVM_GetHostName(char* name, int namelen); jintArray JVM_GetThreadStateValues(JNIEnv* env, jint javaThreadState); jobjectArray JVM_GetThreadStateNames(JNIEnv* env, jint javaThreadState, jintArray values); </code></pre>
<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8057777">JDK-8057777</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.util.logging</span><br />
<strong>Remove LogManager addPropertyChangeListener and removePropertyChangeListener methods</strong><br />The deprecated <code>addPropertyListener</code> and <code>removePropertyListener</code> methods have been removed from <code>java.util.logging.LogManager</code>. Code that relies on a listener to be invoked when logging configuration changes should use the new <code>addConfigurationListener</code> and <code>removeConfigurationListener</code> methods instead.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8029805">JDK-8029805</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/runtime</span><br />
<strong>The FenceInstruction VM Option was removed</strong><br />The FenceInstruction VM option has been removed. Although defined as a 'product' flag it was in fact experimental, unstable and only used within a code path that was itself only used under other experimental settings. That code has now been removed along with the FenceInstruction option.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8073165">JDK-8073165</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.io</span><br />
<strong>Remove pathname canonicalization from FilePermission</strong><br />Prior to JDK 9, creating a FilePermission object canonicalized its pathname, and the implies and equals methods were based on this canonicalized pathname. For example, if &quot;file&quot; and &quot;/path/to/current/directory/file&quot; point to the same file in the file system, two FilePermission objects from these pathnames are equal and imply each other if their actions are also the same.<br />
<br />In JDK 9, the pathname will not be canonicalized by default. This means two FilePermission objects will not equal each other if one uses an absolute path and the other a relative path, or one uses a symbolic link and the other the target, or one uses a Windows long name and the other a DOS-style 8.3 name, even if they point to the same file in the file system.<br />
<br />A compatibility layer has been added to ensure that granting a FilePermission for a relative path will still permit applications to access the file with an absolute path (and vice versa). This works for the default Policy provider and the limited doPrivileged (http://openjdk.java.net/jeps/140) calls. For example, although a FilePermission on a file with a relative pathname of &quot;a&quot; no longer implies a FilePermission on the same file with an absolute pathname of &quot;/pwd/a&quot; (suppose &quot;pwd&quot; is the current working directory), granting code a FilePermission to read &quot;a&quot; allows that code to also read &quot;/pwd/a&quot; when a Security Manager is enabled. This compatibility layer does not cover translations between symbolic links and targets, or Windows long names and DOS-style 8.3 names, or any other different name forms that can be canonicalized to the same name.<br />
<br />A system property named jdk.io.permissionsUseCanonicalPath has been introduced. When it is set to &quot;true&quot;, FilePermission will canonicalize its pathname as it did before JDK 9. The default value of this property is &quot;false&quot;.<br />
<br />A system property named jdk.security.filePermCompat has also been introduced. When set to &quot;true&quot;, the compatibility layer described above will also be supported for third-party Policy implementations. The default value of this property is &quot;false&quot;.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8164705">JDK-8164705</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/gc</span><br />
<strong>Remove deprecated command line flags</strong><br />These internal command line flags, which have been deprecated or aliased since JDK 6, have been removed:<br />
<br /><code>CMSParPromoteBlocksToClaim</code>, <code>ParCMSPromoteBlocksToClaim</code>, <code>ParallelGCOldGenAllocBufferSize</code>, <code>ParallelGCToSpaceAllocBufferSize</code>, <code>UseGCTimeLimit</code>, <code>CMSPermGenSweepingEnabled</code>, <code>ResizeTLE</code>, <code>PrintTLE</code>, <code>TLESize</code>, <code>UseTLE</code>, <code>MaxTLERatio</code>, <code>TLEFragmentationRatio</code>, <code>TLEThreadRatio</code><br />
<br />In addition to this, these internal flags have been deprecated:<br />
<br /><code>CMSMarkStackSizeMax</code>, <code>ParallelMarkingThreads</code>, <code>ParallelCMSThreads</code>, <code>CMSMarkStackSize</code>, <code>G1MarkStackSize</code><br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8061611">JDK-8061611</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/runtime</span><br />
<strong>VM Options AdjustConcurrency and PrintJVMWarnings are removed</strong><br />The VM Options <code>-XX:AdjustConcurrency</code> and <code>-XX:PrintJVMWarnings</code> are removed from JDK 9.<br />
<br />The VM option <code>-XX:AdjustConcurrency</code> was only needed on Solaris 8/9 (when using the T1 threading library).<br />
<br />The VM option <code>-XX:PrintJVMWarnings</code> was a development option only used by unimplemented VM functions that have themselves been removed in JDK 9.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8073861">JDK-8073861</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/gc</span><br />
<strong>Various GC combinations have now been removed</strong><br />The GC combinations that were deprecated in JDK 8 have now been removed. This means that the following GC combinations no longer exist:<br />
<ul>
    <li>DefNew + CMS</li>
    <li>ParNew + SerialOld</li>
    <li>Incremental CMS The &quot;foreground&quot; mode for CMS has also been removed.</li>
</ul>
<br />The command line flags that were removed are: <code>-Xincgc, -XX:+CMSIncrementalMode, -XX:+UseCMSCompactAtFullCollection, -XX:+CMSFullGCsBeforeCompaction</code> and <code>-XX:+UseCMSCollectionPassing</code>.<br />
<br />The command line flag <code>-XX:+UseParNewGC</code> no longer has any effect. ParNew can only be used with CMS and CMS requires ParNew. Thus, the <code>-XX:+UseParNewGC</code> flag has been deprecated and will likely be removed in a future release.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8044022">JDK-8044022</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-svc/javax.management</span><br />
<strong>Support for IIOP transport from JMX RMI connector is removed.</strong><br />IIOP transport from JMX RMIConnector has been removed. RMI is now the only supported JSR160 connector.<br />
JDK-8043937 (not public) <br />
<br />
<br />
<br /><span style="font-family: Courier New">client-libs/javax.swing</span><br />
<strong>JFrame.EXIT_ON_CLOSE was removed in favour of WindowConstants.EXIT_ON_CLOSE</strong><br />The public static constant JFrame.EXIT_ON_CLOSE was removed in favour of WindowConstants.EXIT_ON_CLOSE.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8073420">JDK-8073420</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">tools/javac</span><br />
<strong>for Remove support for 1.5 and earlier source and target options</strong><br />The javac command no longer supports -source or -target values for releases before 6/1.6. However, older class files are still readable by javac. Source code for older release can be ported to a newer source level. To generate class files usable by releases older than JDK 6, a javac from a JDK 6, 7, or 8 release family can be used.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8011044">JDK-8011044</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.util.jar</span><br />
<strong>Remove Packer/Unpacker addPropertyChangeListener and removePropertyListener methods</strong><br />The deprecated <code>addPropertyListener</code> and <code>removePropertyListener</code> methods have been removed from <code>java.util.jar.Pack200.Packer</code> and <code>java.util.jar.Pack200.Unpacker</code>. Applications that need to monitor progress of a packer or unpacker should poll the value of the <code>PROGRESS</code> property instead.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8029806">JDK-8029806</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs</span><br />
<strong>Removed stopThread RuntimePermission from the default java.policy</strong><br />The default <code>java.policy</code> no longer grants <code>stopThread</code> runtime permission in JDK 9.<br />
<br />In previous releases, untrusted code had the <code>stopThread</code> runtime permission by default. This allows untrusted code to call <code>Thread::stop</code> ( on threads other than the current one ). Having an arbitrary exception thrown asynchronously is not something that trusted code should be expected to handle gracefully. So this permission is removed by default in JDK 9. The following line is deleted from the file <code>conf/security/java.policy</code> : <code>permission java.lang.RuntimePermission &quot;stopThread&quot;;</code><br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-7067728">JDK-7067728</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">javafx/scenegraph</span><br />
<strong>JavaFX builder classes have been removed</strong><br />The JavaFX builder classes, which were previously deprecated in JDK 8 with the stated intention to remove them, have been removed from JDK 9. JavaFX applications that use the builder classes should instead construct the needed scene graph objects directly and set the desired properties with the equivalent method calls.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8092861">JDK-8092861</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">javafx/other</span><br />
<strong>JavaFX impl_* methods have been removed</strong><br />Several deprecated and undocumented &quot;impl_*&quot; methods have been removed from JDK 9.<br />
<br />In prior releases, many public JavaFX classes in exported packages had public or protected implementation methods that were named with &quot;impl_*&quot; in the name, marked as &quot;@Deprecated&quot; with the stated intention of removing them, and hidden from the API documentation with the &quot;@treatAsPrivate&quot; javadoc tag.<br />
<br />These methods were never supported and were not intended to be used by applications. JavaFX applications that were using these undocumented methods will need to stop calling them.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8144585">JDK-8144585</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">tools/launcher</span><br />
<strong>Remove Launch-Time JRE Version Selection</strong><br />The Launch-Time JRE Version Selection also known as Multiple JRE or mJRE functionality will no longer be available with the java launcher. This means the java launcher will not invoke another JRE version, and will exit with an error.<br />
<br />The presence of &quot;-version:x.y.z&quot;, &quot;-jre-restrict-search&quot; and &quot;-jre-no-restrict-search&quot; on the java launcher's command-line will cause it to exit with an error message. The environment variable &quot;JRE_VERSION_PATH&quot; will be ignored.<br />
<br />The Java Archive (jar) manifest entry &quot;JRE-version&quot; will cause the java launcher to emit a warning, and &quot;JRE-Restrict-Search&quot; will be ignored.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8050071">JDK-8050071</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">infrastructure/build</span><br />
<strong>Remove Oracle Solaris ISA bin directories and links</strong><br />On Oracle Solaris, the JDK and JRE no longer have an ISA (Instruction Specific Architecture) bin directory. The <code>$JAVA_HOME/bin/sparcv9</code> and <code>$JAVA_HOME/bin/amd64</code> directories, and the sym links in the directories, were present in JDK 8 to aid migration after 32-bit support was removed. Scripts or applications that rely on these locations should be updated to use <code>$JAVA_HOME/bin</code>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8029997">JDK-8029997</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.util.jar</span><br />
<strong>The system property sun.zip.disableMemoryMapping has been removed</strong><br />The zip library implementation has been improved in JDK 9. The new java.util.zip.ZipFile implementation does not use <strong>mmap</strong> to map ZIP file central directory into memory anymore. As a result, the <code>sun.zip.disableMemoryMapping</code> system property is no longer needed and has been removed.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8142508">JDK-8142508</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.net</span><br />
<strong>Remove the JDK-Internal name service provider interface and default implementation</strong><br />Previous JDK releases documented how to configure <code>java.net.InetAddress</code> to use the JNDI DNS service provider as the name service. This mechanism, and the system properties to configure it, have been removed in JDK 9<br />
<br />A new mechanism to configure the use of a hosts file has been introduced.<br />
<br />A new system property <code>jdk.net.hosts.file</code> has been defined. When this system property is set, the name and address resolution calls of <code>InetAddress</code>, i.e <code>getByXXX</code>, retrieve the relevant mapping from the specified file. The structure of this file is equivalent to that of the <code>/etc/hosts</code> file.<br />
<br />When the system property <code>jdk.net.hosts.file</code> is set, and the specified file doesn't exist, the name or address lookup will result in an UnknownHostException. Thus, a non existent hosts file is handled as if the file is empty.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8134577">JDK-8134577</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">client-libs</span><br />
<strong>References to java.awt.peer and java.awt.dnd.peer packages were removed from the public API</strong><br />All methods that refer to types defined in the java.awt.peer and java.awt.dnd.peer packages (the &quot;peer types&quot;) were removed from the Java API in Java SE 9 . Application code which calls any such method which accepts or returns a type defined in these packages will no longer link. This is a BINARY incompatible change.<br />
<br />An additional information is provided here: http://mail.openjdk.java.net/pipermail/awt-dev/2015-February/008924.html<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8037739">JDK-8037739</a> <br />
<br />
<br />
<br />&nbsp;<br />












<a id="Notes-jdk9" name="Notes-jdk9"></a><h2>Notes</h2>
<br />
<span style="font-family: Courier New">hotspot/svc</span><br />
<strong>Binary format for HPROF updated</strong><br />When dumping the heap in binary format, HPROF format 1.0.2 is always used now. Previously format 1.0.1 was used for heaps smaller than 2GB. HPROF format 1.0.2 is also used by jhsdb jmap for the serviceability agent.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8144732">JDK-8144732</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
hotspot/runtime</span><br />
<strong>-XX+TraceExceptions enabled in production.</strong><br />When an exception is caught and re-thrown, it can be difficult to locate the caught exception. The <code>TraceExceptions</code> option can help to find this exception.<br />
<br />Usage: Turn this flag on with &quot;-XX:+TraceExceptions&quot; or turn it off with &quot;-XX:-TraceExceptions&quot;.<br />
<br />Note: This flag has been deprecated in favor of &quot;-Xlog:exceptions=info&quot;<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8064319">JDK-8064319</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.lang:class_loading</span><br />
<strong>&quot;sun.lang.ClassLoader.allowArraySyntax&quot; system property is no longer supported</strong><br /><code>sun.lang.ClassLoader.allowArraySyntax</code> system property was introduced as a temporary workaround to give customers time to remove their source dependency on calling <code>ClassLoader.loadClass</code> with the array syntax that is not supported since JDK 6. This temporary workaround is removed in JDK 9 and setting <code>sun.lang.ClassLoader.allowArraySyntax</code> system property will have no effect to <code>ClassLoader.loadClass</code>. Existing code that calls <code>ClassLoader.loadClass</code> to create a <code>Class</code> object of an array class shall be replaced with <code>Class.forName</code>; otherwise it will get <code>ClassNotFoundException</code>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-6516909">JDK-6516909</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
security-libs/javax.security</span><br />
<strong>auth.login.LoginContext needs to be updated to work with modules</strong><br />After this change, besides implementing the necessary methods (<code>initialize</code>, <code>login</code>, <code>logout</code>, <code>commit</code>, <code>abort</code>), any login module must implement the <code>LoginModule</code> interface. Otherwise a <code>LoginException</code> will be thrown when the login module is used.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8047789">JDK-8047789</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">xml/jaxp</span><br />
<strong>JAXP library updated with selected Xerces 2.11.0 updates</strong><br />The JAXP library in JDK 9 has been updated to Xerces-J 2.11.0 release in the following areas:<br />
<ul>
    <li>Datatypes</li>
    <li>DOM Level 3 serialization</li>
    <li>XPointer</li>
    <li>XML Schema Validation</li>
</ul>
<br />This update includes improvement and bug fixes in the above areas up to the Xerces-J 2.11.0 release, but not the experimental support for XML Schema 1.1 features. Refer to <a href="https://xerces.apache.org/xerces2-j/releases.html">Xerces-J 2.11.0 Release Notes</a> for more details.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8044086">JDK-8044086</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
<a id="NewFeatures-jdk9" name="NewFeatures-jdk9"></a><h2>New Features</h2>
security-libs/javax.crypto</span><br />
<strong>Support DHE sizes up to 8192-bits and DSA sizes up to 3072-bits</strong><br />Extend to support 3072-bits DH and DSA parameters generation, and pre-computed DH parameters up to 8192 bits and pre-computed DSA parameters up to 3072-bits.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8072452">JDK-8072452</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
tools/launcher</span><br />
<strong>Support @-files for java command-line tool</strong><br />The <code>java</code> launcher now supports reading arguments from &quot;argument files&quot; specified on the command line. It is not uncommon that the <code>java</code> launcher is invoked with very long command lines (a long class path for example). Many operating systems impose a limit on the length of a command line, something that &quot;argument files&quot; can be used to work around.<br />
<br />In JDK 9, java now can read arguments from specified files as they are put on the command line. See <a href="https://docs.oracle.com/javase/9/tools/java.htm#GUID-3B1CE181-CD30-4178-9602-230B800D4FAE">java command reference</a> and <a href="https://docs.oracle.com/javase/9/tools/java.htm#JSWOR-GUID-4856361B-8BFD-4964-AE84-121F5F6CF111">java Command-Line Argument Files</a> for more details.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8027634">JDK-8027634</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-libs</span><br />
<strong>Support system or alternative implementations of zlib</strong><br />The Java runtime now uses system zlib library (the zlib library installed on the underlying operation system) for its zlib compression support (the deflation and inflation functionality in java.util.zip, for example) on Solaris and Linux platforms.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8031767">JDK-8031767</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/jdk.security</span><br />
<strong>New APIs for jar signing</strong><br />A new <code>jdk.security.jarsigner.JarSigner</code> API is added to the <code>jdk.jartool</code> module which can be used to sign a jar file.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8056174">JDK-8056174</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/javax.security</span><br />
<strong>Access ExtendedGSSContext.inquireSecContext() result through SASL</strong><br />The output of <code>ExtendedGSSContext.inquireSecContext()</code> is now available as negotiated properties for the SASL GSSAPI mechanism using the name &quot;com.sun.security.jgss.inquiretype.&lt;type_name&gt;&quot;, where &quot;type_name&quot; is the string form of the <code>InquireType</code> enum parameter in lower case. For example, &quot;com.sun.security.jgss.inquiretype.krb5_get_session_key_ex&quot; for the session key of an established Kerberos 5 security context.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8044085">JDK-8044085</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/org.ietf.jgss:krb5</span><br />
<strong>accept yes/no for boolean krb5.conf settings</strong><br />Besides &quot;true&quot; and &quot;false&quot;, krb5.conf now also accepts &quot;yes&quot; and &quot;no&quot; for boolean-valued settings.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8029995">JDK-8029995</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
xml/jaxp</span><br />
<strong>A new property &quot;maxXMLNameLimit&quot; is added</strong><br />A new property &quot;maxXMLNameLimit&quot; is added to limit the maximum size of XML names, including element name, attribute name and namespace prefix and URI. It is recommended that users set the limit to the smallest possible number so that malformed XML files can be caught quickly. For more about XML processing limits, please see <a href="https://docs.oracle.com/javase/tutorial/jaxp/limits/index.html">The Java Tutorials, Processing Limits</a>.<br />
JDK-8086733 (not public) <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-libs/java.nio.charsets</span><br />
<strong>IBM1166 character set now available</strong><br />This release adds IBM1166 character set. It provides support for cyrillic multilingual with euro for Kazakhstan. Aliases for this new character set include &quot;cp1166&quot;,&quot;ibm1166&quot;, &quot;ibm-1166&quot;, &quot;1166&quot;.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8071447">JDK-8071447</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.util:i18n</span><br />
<strong>UTF-8 based Properties Files</strong><br />Properties files in UTF-8 encoding are now supported by ResourceBundle, with automatic fall back to ISO-8859-1 encoding if needed. For more detail, refer to <a href="http://download.java.net/java/jdk9/docs/api/java/util/PropertyResourceBundle.html">PropertiyResourceBundle</a> class description.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8027607">JDK-8027607</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.util:i18n</span><br />
<strong>Use CLDR locale data by default</strong><br />The default locale data has been switched to use data derived from the Unicode Consortium's Common Locale Data Repository (CLDR). For more detail, refer to the <a href="http://openjdk.java.net/jeps/252">JEP 252</a>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8008577">JDK-8008577</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/javax.lang.model</span><br />
<strong>for Provided new utility visitors supporting SourceVersion.RELEASE_9</strong><br />The constructors for the utility visitors in javax.lang.model.util that correspond to the RELEASE_6 source level have been deprecated since the reference implementation regards -source 6 as obsolete. Authors of annotation processors should update their processors to support newer source versions.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8050430">JDK-8050430</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
xml/javax.xml.xpath</span><br />
<strong>XPath enhancement</strong><br />Java SE 9 improves the <code>javax.xml.xpath</code> API with new APIs that make use of modern language features to facilitate ease of use and extend support of the XPath specification.<br />
<ol>
    <li>Support ANY type</li>
</ol>
<blockquote>
<br /><code>javax.xml.xpath</code> supported explicit data types defined by the XPath specification. However, it was missing the important <code>ANY</code> type without which the XPath API assumes that an explicit type is always known, which is not true in some circumstances. The new API now supports the <code>ANY</code> type so that an XPath evalution can be performed when the return type is unknown.<br />
</blockquote>
<ol start="2">
    <li>Improved ease of use</li>
</ol>
<blockquote>
<br />For ease of use, four new <code>evaluateExpression</code> methods are added to the <code>javax.xml.xpath.XPath</code> and <code>javax.xml.xpath.XPathExpression</code> interfaces to allow specifying explicit types as follows:<br />
</blockquote><blockquote>
<br />When specified explicitly, the new methods return the specific types, including <code>Boolean</code>, <code>Double</code>, <code>Integer</code>, <code>Long</code>, <code>String</code> and <code>org.w3c.dom.Node</code>.<br />
</blockquote><blockquote>
<br />When the return type is expected to be <code>NODESET</code>, the new methods will return a new <code>XPathNodes</code> type. <code>XPathNodes</code> is a new interface that extends <code>Iterable&lt;Node&gt;</code> which makes it easier to use than the traditional <code>org.w3c.dom.NodeList</code>.<br />
</blockquote><blockquote>
<br />When the return type is unknown or <code>ANY</code>, the new methods return a new <code>XPathEvaluationResult</code> type. <code>XPathEvaluationResult</code> provides an <code>XPathResultType</code> enum that defines the supported types that are <code>ANY</code>, <code>BOOLEAN</code>, <code>NUMBER</code>, <code>STRING</code>, <code>NODESET</code>, and <code>NODE</code>.<br />
</blockquote></div>
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8054196">JDK-8054196</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.lang</span><br />
<strong>Unicode 8 support</strong><br />The JDK 9 release includes support for Unicode 8.0. Since the release of JDK 8, which supported Unicode 6.2.0, the Unicode 8.0 introduced the following new features that are now included in JDK 9:<br />
<ul>
    <li>
    <br />10,555 new characters<br />
    </li>
    <li>
    <br />42 new blocks<br />
    </li>
    <li>
    <br />29 scripts<br />
    </li>
    <li>
    <br />10,555 new characters; Includes Georgian Lari currency symbol. Two newly adopted currency symbols: Manat, used in Azerbaijan &amp; Ruble, used in Russia and other countries.<br />
    </li>
    <li>
    <br />29 new scripts : Ahom Anatolian Hieroglyphs Bassa Vah Caucasian Albanian Duployan Elbasan Grantha Hatran Khojki Khudawadi Linear A Mahajani Manichaean Mende Kikakui Modi Mro Multani Nabataean Old Hungarian Old North Arabian Old Permic Pahawh Hmong Palmyrene Pau Cin Hau Psalter Pahlavi Siddham Sutton SignWriting Tirhuta Warang Citi<br />
    </li>
    <li>
    <br />42 new blocks which includes 29 blocks for the new scripts listed above and 13 blocks for the following existing scripts: Cherokee Supplement CJK Unified Ideographs Extension E Combining Diacritical Marks Extended Coptic Epact Numbers Early Dynastic Cuneiform Geometric Shapes Extended Latin Extended-E Myanmar Extended-B Ornamental Dingbats Shorthand Format Controls Sinhala Archaic Numbers Supplemental Arrows-C Supplemental Symbols and Pictographs<br />
    </li>
</ul>
</div>
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8072600">JDK-8072600</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
xml/jaxp</span><br />
<strong>XML Catalog API</strong><br />Java SE 9 introduces a standard XML Catalog API that supports the OASIS XML Catalogs version 1.1 standard. The API defines catalog and catalog-resolver abstractions that can be used as an intrinsic or external resolver with the JAXP processors that accept resolvers.<br />
<br />Existing libraries or applications that use the internal catalog API shall consider migrating to the new API in order to take advantage of the new features.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8081248">JDK-8081248</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/org.ietf.jgss:krb5</span><br />
<strong>Support &quot;include&quot; and &quot;includedir&quot; in krb5.conf</strong><br />The krb5.conf file now supports including other files using either the &quot;include FILENAME&quot; or &quot;includedir DIRNAME&quot; directives. FILENAME or DIRNAME must be an absolute path. The named file or directory must exist and be readable. Including a directory includes all files within the directory whose names consist solely of alphanumeric characters, dashes, or underscores. An included file can include other files but no recursion is allowed.<br />
<br />Also, before this change, when the same setting for a single-valued option (For example, default_realm) is defined more than once in krb5.conf, the last value was chosen. After this change, the first value is chosen. This is to be consistent with other krb5 vendors.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8029994">JDK-8029994</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs</span><br />
<strong>Add variant of DSA Signature algorithms that do not ASN.1 encode the signature bytes</strong><br />A non-ASN.1 encoded form for DSA and ECDSA signatures has been implemented. This new signature output format concatenates the r and s values from the signature in conformance with IEEE P1363. Signature objects using this format must provide one of the following algorithm Strings to the Signature.getInstance() method:<br />
<br />For DSA: NONEwithDSAinP1363Format SHA1withDSAinP1363Format SHA224withDSAinP1363Format SHA256withDSAinP1363Format<br />
<br />For ECDSA: NONEwithECDSAinP1363Format SHA1withECDSAinP1363Format SHA224withECDSAinP1363Format SHA256withECDSAinP1363Format SHA384withECDSAinP1363Format SHA512withECDSAinP1363Format<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8042967">JDK-8042967</a> <br />
<br />
<br />



<a id="Changes-jdk9" name="Changes-jdk9"></a>
<h2>Changes</h2>
<br /><span style="font-family: Courier New">
deploy/webstart</span><br />
<strong>For Java Web Start, custom XML parser replaced with SAX parser</strong><br />In 8u20, the custom XML parser that was used in Java Web Start to parse jnlp file was replaced with the standard SAX parser. When a parsing error occurred, the code would print a warning message to the Java Console and Trace file, and then try again using the custom XML parser. In JDK 9 this fallback has been removed. If the jnlp file cannot be parsed by the SAX parser an error dialog will show and the app will not run. This could cause compatibility errors with existing JNLP files that don't follow the XML rules that are enforced by the SAX parser.<br />
JDK-8064476 (not public) <br />
<br />


<br /><span style="font-family: Courier New">
security-libs/javax.net.ssl</span><br />
<strong>Improve the default strength of EC in JDK.</strong><br />To improve the default strength of EC cryptography, EC keys less than 224 bits have been deactivated in certification path processing (via the &quot;jdk.certpath.disabledAlgorithms&quot; Security Property) and SSL/TLS/DTLS connections (via the &quot;jdk.tls.disabledAlgorithms&quot; Security Property) in JDK. Applications can update this restriction in the Security Properties and permit smaller key sizes if really needed (for example, &quot;EC keySize &lt; 192&quot;).<br />
<br />EC curves less than 256 bits are removed from the SSL/TLS/DTLS implementation in JDK. The new System Property, &quot;jdk.tls.namedGroups&quot;, defines a list of enabled named curves for EC cipher suites in order of preference. If an application needs to customize the default enabled EC curves or the curves preference, please update the System Property accordingly. For example:<br />
<pre><code>jdk.tls.namedGroups=&quot;secp256r1, secp384r1, secp521r1&quot; </code></pre>
<br />Note that the default enabled or customized EC curves follow the algorithm constraints. For example, the customized EC curves cannot re-activate the disabled EC keys defined by the Java Security Properties.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8148516">JDK-8148516</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>De-privileged module permissions granted by default</strong><br />When using a <code>SecurityManager</code>, the permissions required by JDK modules are granted by default, and are not dependent on the <code>policy.url</code> properties that are set in the <code>java.security</code> file.<br />
<br />This also applies if you are setting the <code>java.security.policy</code> system property with either the '=' or '==' option.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8159752">JDK-8159752</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-svc/java.lang.instrument</span><br />
<strong>Agent JAR added to app class loader rather than system class loader when running with -Djava.system.class.loader</strong><br />When running a java application with the options &quot;-javaagent:myagent.jar -Djava.system.classloader=MyClassLoader&quot;, myagent.jar is added to the custom system class loader rather than the application class loader.<br />
<br />In addition, the java.lang.instrument package description has a small update making it clear that a custom system class loader needs to define appendToClassPathForInstrumentation in order to load the agent at startup. Before custom system class loaders were required to implement this method only if the agents are started in the live phase (Agent_OnAttach).<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8160950">JDK-8160950</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-libs/java.net</span><br />
<strong>Platforms without multicasting support</strong><br />In Java SE 9 the requirement to support multicasting has been somewhat relaxed, in order to support a small number of platforms where multicasting is not available. The specification for the <code>java.net.MulticastSocket::joinGroup</code> and the <code>java.nio.channels.MulticastChannel::join</code> methods has been updated to indicate that an <code>UnsupportedOperationException</code> will be thrown if invoked on a platform that does not support multicasting.<br />
<br />There is no impact to Oracle JDK platforms, since they do support multicasting.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8157166">JDK-8157166</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>Custom Policy Providers may need additional configuration</strong><br />Classes loaded from the extensions directory are no longer granted <code>AllPermission</code> by default. See <a href="http://bugs.java.com/view_bug.do?bug_id=JDK-8040059">JDK-8040059</a>.<br />
<br />A custom <code>java.security.Policy</code> provider that was using the extensions mechanism may be depending on the policy grant statement that had previously granted it <code>AllPermission</code>. If the policy provider does anything that requires a permission check, the local policy file may need to be adjusted to grant those permissions.<br />
<br />Also, custom policy providers are loaded by the system class loader. The <code>classpath</code> may need to be configured to allow the provider to be located.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8075706">JDK-8075706</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
hotspot/runtime</span><br />
<strong>Enforce format checks for NameAndType strings</strong><br />This change enforces the unqualified name format checks for <code>NameAndType</code> strings as outlined in the JVM specification sections 4.4.6 and 4.2.2, meaning that some illegal names and descriptors that users may be utilizing in their classfiles will now be caught with a Class Format Error. This includes format checking for all strings under non-referenced <code>NameAndType</code>'s. Users will see a change if they (A) are using Java classfile version 6 or below and have an illegal NameAndType descriptor with no Methodref or Fieldref reference to it; or (B) are using any Java classfile version and have an illegal NameAndType name with no Methodref or Fieldref reference to it.<br />
<br />In both (A) and (B) the users will now receive a ClassFormatError for those illegal strings, which is an enforcement of unqualified name formats as delineated in JVMS 4.2.2.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8161224">JDK-8161224</a> <br />
<br />
<br />




<br /><span style="font-family: Courier New">security-libs/java.security</span><br />
<strong>keytool now prints warnings when reading or generating cert/cert req using weak algorithms</strong><br />With one exception, keytool will always print a warning if the certificate, certificate request, or CRL it is parsing, verifying, or generating is using a weak algorithm or key. When the <code>-trustcacerts</code> option is specified or the <code>cacerts</code> keystore is being directly operated on, keytool will not print a warning for certificates in the <code>cacerts</code> keystore that have been signed with a weak signature algorithm.<br />
<br />Precisely, an algorithm or a key is weak if it matches the value of the <code>jdk.certpath.disabledAlgorithms</code> security property defined in the <code>conf/security/java.security</code> file.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8171319">JDK-8171319</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.time</span><br />
<strong>Changing the boundaries specified by ChronoField.EPOCH_DAY</strong><br />Boundaries specified by java.time.temporal.ChronoField.EPOCH_DAY have been corrected to match the epoch day of LocalDate.MIN and LocalDate.MAX<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8160681">JDK-8160681</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.rmi</span><br />
<strong>RMI server-side multiplex protocol has been disabled</strong><br />The RMI multiplex protocol is disabled by default. It can be re-enabled by setting the system property &quot;sun.rmi.transport.tcp.enableMultiplexProtocol&quot; to &quot;true&quot;.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8158963">JDK-8158963</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-svc/java.lang.management</span><br />
<strong>Changes in logging interface in MXBean</strong><br />In Java SE 9 the <code>java.util.logging.LoggingMXBean</code> interface is deprecated in favor of the <code>java.lang.management.PlatformLoggingMXBean</code> interface. The <code>java.util.logging.LogManager.getLoggingMXBean()</code> method is also deprecated in favor of <code>java.lang.mangement.ManagementFactory.getPlatformMXBean(PlatformLoggingMXBean.class)</code>.<br />
<br />The concrete implementation of the logging MXBean registered in the MBeanServer and obtained from the ManagementFactory will only implement <code>java.lang.management.PlatformLoggingMXBean</code>, and no longer <code>java.util.logging.LoggingMXBean</code>. It must be noted that <code>PlatformLoggingMXBean</code> and <code>LoggingMXBean</code> attributes are exactly the same. The <code>PlatformLoggingMXBean</code> interface has all the methods defined in <code>LoggingMXBean</code>, and so <code>PlatformLoggingMXBean</code> by itself provides the full management capability of logging facility.<br />
<br />This should be mostly transparent to remote and local clients of the API.<br />
<br /><strong>Compatibility:</strong><br />Calls to <code>ManagementFactory.newPlatformMXBeanProxy(MBeanServerConnection, ObjectName, java.util.logging.LoggingMXBean.class)</code> and calls to <code>JMX.newMXBeanProxy(MBeanServerConnection, ObjectName, java.util.logging.LoggingMXBean.class)</code> will continue to work as before.<br />
<br />Remote clients running any version of the JDK should see no changes, except for the interface name in <code>MBeanInfo</code>, and the change in <code>isInstanceOf</code> reported in 1. and 2. below.<br />
<br />The behavioral change and source incompatibility due to this change are as follows:<br />
<ol>
    <li>
    <br /><code>ManagementFactory.getPlatformMBeanServer().isInstanceOf(ObjectName, &quot;java.util.logging.LoggingMXBean&quot;)</code> will now return '<code>false</code>' instead of '<code>true</code>'.<br />
    If an application depends on this, then a workaround is to change the source of the calling code to check for <code>java.lang.management.PlatformLoggingMXBean</code> instead.<br />
    </li>
    <li>
    <br />The Logging MXBean <code>MBeanInfo</code> will now report that its management interface is <code>java.lang.management.PlatformLoggingMXBean</code> instead of the non standard <code>sun.management.ManagementFactoryHelper$LoggingMXBean</code> name it used to display.<br />
    The new behavior has the advantage that the reported interface name is now a standard class.<br />
    </li>
    <li>
    <br />Local clients which obtain an instance of the logging MXBean by calling <code>ManagementFactory.getPlatformMXBean(PlatformLoggingMXBean.class)</code> will no longer be able to cast the result to <code>java.util.logging.LoggingMXBean</code>.<br />
    <code>PlatformLoggingMXBean</code> already has all the methods defined in <code>LoggingMXBean</code>, therefore a simple workaround is to change the code to accept <code>PlatformLoggingMXBean</code> instead - or change it to use the deprecated <code>LogManager.getLoggingMXBean()</code> instead.<br />
    </li>
</ol>
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8139982">JDK-8139982</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>Update SecurityManagercheckPackageAccess to restrict non-exported JDK packages by default</strong><br />The implementation of the <code>checkPackageAccess</code> and <code>checkPackageDefinition</code> methods of <code>java.lang.SecurityManager</code> now automatically restrict all non-exported packages of JDK modules loaded by the platform class loader or its ancestors. This is in addition to any packages listed in the <code>package.access</code> and <code>package.definition</code> security properties. A &quot;non-exported package&quot; refers to a package that is not exported to all modules. Specifically, it refers to a package that either is not exported at all by its containing module or is exported in a qualified fashion by its containing module.<br />
<br />If your application is running with a <code>SecurityManager</code>, it will need to be granted an appropriate <code>accessClassInPackage.{package} RuntimePermission</code> to access any non-exported JDK APIs (in addition to specifying an appropriate <code>--add-exports</code> option). If the application has not been granted access, a <code>SecurityException</code> will be thrown.<br />
<br />The <code>package.access</code> and <code>package.definition</code> properties no longer contain non-exported JDK packages. Therefore, if an application calls <code>Security.getProperty(&quot;package.access&quot;)</code>, it will not include the builtin non-exported JDK packages.<br />
<br />Also, when running under a <code>SecurityManager</code>, an attempt to access a type in a restricted package that does not contain any classes now throws a <code>ClassNotFoundException</code> instead of an <code>AccessControlException</code>. For example, loading <code>sun.Foo</code> now throws a <code>ClassNotFoundException</code> instead of an <code>AccessControlException</code> because there are no classes in the <code>sun</code> package.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8055206">JDK-8055206</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
hotspot/runtime</span><br />
<strong>Additional consistency checks for JVM_CONSTANT_Methodref and JVM_CONSTANT_InterfaceMethodref</strong><br />The JVM has been fixed to check that the constant pool types JVM_CONSTANT_Methodref or JVM_CONSTANT_InterfaceMethodref are consistent with the type of method referenced. These checks are made during method resolution and are also checked for methods that are referenced by JVM_CONSTANT_MethodHandle.<br />
<br />If consistency checks fail an IncompatibleClassChangeError is thrown.<br />
<br />javac has never generated inconsistent constant pool entries, but some bytecode generating software may. In many cases, if ASM is embedded in the application, upgrading to the latest version ASM 5.1 resolves the exception. After upgrading ASM, be sure to replace all uses of deprecated functions with calls to the new functions, particularly new functions that pass a boolean whether the method is an interface method: visitMethodInsn and Handle.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8145148">JDK-8145148</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
core-libs/java.lang:reflect</span><br />
<strong>Class.getMethod and Class.getMethods more accurately follow inheritance rules</strong><br />The javadoc for the Class.getMethod and Class.getMethods refer to the definition of inheritance in the Java Language Specification. Java SE 8 changed these rules in order to support default methods and reduce the number of redundant methods inherited from superinterfaces (see JLS 8, 8.4.8).<br />
<br />Class.getMethod and Class.getMethods were not updated with the 8 release to match the new inheritance definition (both may return non-inherited superinterface methods). The implementation has now been changed to filter out methods that are not members of the class.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8029459">JDK-8029459</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
javafx/graphics</span><br />
<strong>Stage background is now filled with Scene fill color</strong><br />Starting with the JDK 9 release, a Stage on Mac and Linux platforms will be initially filled using the Fill property of the Scene if its Fill is a Color. An average color, computed within the stops range, will be used if the Fill is a LinearGradient or RadialGradient. Previously, it was initially filled with WHITE, irrespective of the Fill in the Scene. This change in behavior will reduce the flashing that can be seen with a dark Scene background, but applications should be aware of this change in behavior so they can set an appropriate Fill color for their Scene.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8088179">JDK-8088179</a> <br />
<br />
<br />



<br /><span style="font-family: Courier New">
hotspot/runtime</span><br />
<strong>Remove JVM_DefineClassWithSourceCond() API</strong><br />The JVM_DefineClassWithSourceCond() API is no longer available starting with this release.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8143078">JDK-8143078</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-svc/debugger</span><br />
<strong>JDWP socket connector accept only local connections by default</strong><br />The JDWP socket connector has been changed to bind to localhost only if no ip address or hostname is specified on the agent command line. A hostname of asterisk (*) may be used to achieve the old behavior which is to bind the JDWP socket connector to all available interfaces; this is not secure and not recommended.<br />
JDK-8041435 (not public) <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.util.logging</span><br />
<strong>Precision of time stamps in java.util.logging.LogRecord has been increased</strong><br />LogRecord now stores the event time in the form of a java.time.Instant. <code>XMLFormatter DTD</code> is upgraded to print the new higher time resolution.<br />
<br />In Java SE 9 <code>java.util.logging</code> is updated to use <code>java.time</code> instead of <code>System.currentTimeMillis()</code> and <code>java.util.Date</code>. This allows for higher time stamp precision in <code>LogRecord</code>.<br />
<br />As a consequence, the implementation of the methods <code>getMillis()</code> and <code>setMillis(long)</code> in <code>java.util.logging.LogRecord</code> has been changed to use <code>java.lang.Instant</code>, and the method <code>setMillis(long)</code> has been deprecated in favor of the new method <code>LogRecord.setInstant(java.time.Instant)</code>. The <code>java.util.logging.SimpleFormatter</code> has been updated to pass a <code>java.time.ZonedDateTime</code> object instead of <code>java.util.Date</code> to <code>String.format</code>. The <code>java.util.logging.XMLFormatter</code> has been updated to print a new optional <code>&lt;nanos&gt;</code> XML element after the <code>&lt;millis&gt;</code> element. The <code>&lt;nanos&gt;</code> element contains a nano seconds adjustment to the number of milliseconds printed in the <code>&lt;millis&gt;</code> element. The <code>XMLFormatter</code> will also print the full <code>java.time.Instant</code> in the <code>&lt;date&gt;</code> field, using the <code>java.time.format.DateTimeFormatter.ISO_INSTANT</code> formatter.<br />
<br /><strong>Compatibility with previous releases:</strong><br />The <code>LogRecord</code> serial form, while remaining fully backward/forward compatible, now contains an additional serial <i><code>nanoAdjustment</code></i> field of type int, which corresponds to a nano seconds adjustment to the number of milliseconds contained in the serial <i><code>millis</code></i> field. If a <code>LogRecord</code> is serialized and transmitted to an application running on a previous release of the JDK, the application will simply see a <code>LogRecord</code> with a time truncated at the millisecond resolution. Similarly, if a <code>LogRecord</code> serialized by an application running on a previous release of the JDK, is transmitted to an application running on Jva SE 9 or later, only the millisecond resolution will be available.<br />
<br />Applications that parse logs produced by the <code>XMLFormatter</code>, and which perform validation, may need to be upgraded with the newer version of the logger.dtd, available in the appendix A of the Logging Overview. In order to mitigate the compatibilty risks, the <code>XMLFormatter</code> class (and subclasses) can be configured to revert to the old XML format from Java SE 8 and before. See the <code>java.util.logging.XMLFormatter</code> API documentation for more details.<br />
<br />There could also be an issue if a subclass of <code>LogRecord</code> overrides <code>getMillis/setMillis</code> without calling the implementation of the super class. In that case, the event time as seen by the formatters and other classes may be wrong, as these have been updated to no longer call <code>getMillis()</code> but use <code>getInstant()</code> instead.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8072645">JDK-8072645</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
hotspot/runtime</span><br />
<strong>Update JNI Version Number</strong><br />The current version of the Java Native Interface (JNI) needs to be updated due to the addition of new application programmatic interfaces to support Jigsaw. <code>JNI_VERSION_9</code> was added with a value of 0x00090000 to the available versions and <code>CurrentVersion</code> was changed to this new value.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8145098">JDK-8145098</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.time</span><br />
<strong>Return unmodifiable set of zone IDs to optimize ZoneIdPrinterParser</strong><br />The performance of java.time.zone.ZoneRulesProvider.getAvailableZoneIds() is improved by returning an unmodifiable set of zone ids; previously the set was modifiable.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8066291">JDK-8066291</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
client-libs/javax.swing</span><br />
<strong>Tab key should move to focused button in a button group</strong><br />The focus behavior of Swing toggle button controls (JRadioButton and JCheckBox) changed when belong to a button group. Now if the input focus is requested to any toggle button in the group through either focus traversal or window activation the currently selected toggle button is focused regardless of the focus traversal policy used in the container. If the selected toggle button is not eligible to be a focus owner the focus is set according to the focus traversal policy.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8074883">JDK-8074883</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-libs/java.util:collections</span><br />
<strong>Arrays.asList().toArray() returns Object[]</strong><br />The <code>Arrays.asList()</code> API returns an instance of <code>List</code>. Calling the <code>toArray()</code> method on that <code>List</code> instance is specified always to return <code>Object[]</code>, that is, an array of <code>Object</code>. In previous releases, it would sometimes return an array of some subtype. Note that the declared return type of <code>Collection.toArray()</code> is <code>Object[]</code>, which permits an instance of an array of a subtype to be returned. The specification wording, however, clearly requires an array of <code>Object</code> to be returned.<br />
<br />The <code>toArray()</code> method has been changed to conform to the specification, and it now always returns <code>Object[]</code>. This may cause code that was expecting the old behavior to fail with a <code>ClassCastException</code>. An example of code that worked in previous releases but that now fails is the following:<br />
<pre><code>    List&lt;String&gt; list = Arrays.asList(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);     String[] array = (String[]) list.toArray(); </code></pre>
<br />If this problem occurs, rewrite the code to use the one-arg form <code>toArray(T[])</code>, and provide an instance of the desired array type. This will also eliminate the need for a cast.<br />
<pre><code>    String[] array = list.toArray(new String[0]); </code></pre>
</div>
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-6260652">JDK-6260652</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.lang:class_loading</span><br />
<strong>De-synchronize java.util.Properties getter methods</strong><br /><code>java.util.Properties</code> is a subclass of the legacy <code>Hashtable</code> class, which synchronizes on itself for any access. System properties are stored in a <code>Properties</code> object. They are a common way to change default settings, and sometimes must be read during classloading.<br />
<br /><code>System.getProperties()</code> returns the same <code>Properties</code> instance accessed by the system, which any application code might synchronize on. This situation has lead to deadlocks in the past, such as 6977738.<br />
<br />The <code>Properties</code> class has been updated to store its values in an internal <code>ConcurrentHashMap</code> (instead of using the inherited <code>Hashtable</code> mechanism), and its getter methods and legacy <code>Enumeration</code>s are no longer synchronized. This should reduce the potential for deadlocks. It also means that since <code>Properties</code>' <code>Iterator</code>s are now generated by <code>ConcurrentHashMap</code>, they don't <em>fail-fast</em> - <code>ConcurrentModificationException</code>s are no longer thrown.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8029891">JDK-8029891</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
xml/jax-ws</span><br />
<strong>JAX-WS, JAXB, JAF are deprivileged and defined by platform class loader</strong><br />The defining class loader of java.xml.ws, java.xml.bind, and java.activation module and their classes is changed to the platform class loader (non-null) (see the specification for <code>java.lang.ClassLoader::getPlatformClassLoader</code>). In addition, they are de-privileged and granted with specific permissions.<br />
<br />Existing code that assumes the defining class loader of JAX-WS, JAXB, JAF classes may be impacted by this change (e.g. custom class loader delegation to the bootstrap class loader skipping the extension class loader). They are standalone technologies that used to be loaded by non-null class loader before they were included in Java SE. It should be rare of such dependency.<br />
<br />Callbacks may assume java.xml.ws and java.xml.bind classes to have <code>AllPermission</code> so that when running with security manager, if the permission required for callback is not part of the permission set granted to java.xml.ws and java.xml.bind, <code>SecurityException</code> will be thrown. This may happen when the user-defined callback is missing <code>AccessController::doPrivileged</code>.<br />
<br />The proper fix is to modify the existing code to ensure use of <code>AccessController::doPrivileged</code> wrapping privileged calls.<br />
<br />An interim solution is to modify the security policy to grant AllPermission for example: grant codeBase &quot;jrt:/java.xml.ws&quot; { permission java.security.AllPermission; };<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8057645">JDK-8057645</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>Required Algorithms for JDK 9</strong><br />The following have been added to the security algorithm requirements for JDK implementations (keysize in parentheses):<br />
<ol>
    <li><code>Signature</code>: SHA256withDSA</li>
    <li><code>KeyPairGenerator</code>: DSA (2048), DiffieHellman (2048, 4096), RSA (4096)</li>
    <li><code>AlgorithmParameterGenerator</code>: DSA (2048), DiffieHellman (2048)</li>
    <li><code>Cipher</code>: AES/GCM/NoPadding (128), AES/GCM/PKCS5Padding (128)</li>
    <li><code>SSLContext</code>: TLSv1.1, TLSv1.2</li>
    <li><code>TrustManagerFactory</code>: PKIX</li>
</ol>
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8015388">JDK-8015388</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
tools/javadoc(tool)</span><br />
<strong>javadoc may exit on non-compliant sources.</strong><br />Type New behavior Summary: javadoc may exit on non-compliant input sources. Details If any errors are encountered while reading or analyzing the source code, the javadoc tool will treat them as unrecoverable errors and exit. Releases: jdk9<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8175219">JDK-8175219</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
other-libs/corba:orb</span><br />
<strong>Extend the search path for the org.omg.CORBA.ORB orb.properties file</strong><br />org.omg.CORBA.ORB specifies the search order to locate an ORB's orb.properties file, and this includes searching ${java.home}/lib. The JDK9 release will include a ${java.home}/conf directory as the location for properties files. As such, the ORB.init processing has been amended, to include ${java.home}/conf directory in its search path for an orb.properties file. Thus, the preferred approach is to use the ${java.home}/conf directory, in preference to the ${java.home}/lib directory, as a location for an orb.properties file.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8049376">JDK-8049376</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
tools/javac</span><br />
<strong>Changes in the way javac handles wildcards and capture type variables</strong><br />The javac compiler's behavior when handling wildcards and &quot;capture&quot; type variables has been improved for conformance to the language specification. This improves type checking behavior in certain unusual circumstances. It is also a source-incompatible change: certain uses of wildcards that have compiled in the past may fail to compile because of a program's reliance on the javac bug.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8039214">JDK-8039214</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>Add MD5 to jdk.certpath.disabledAlgorithms security property</strong><br />In this update, MD5 is added to the jdk.certpath.disabledAlgorithms security property and the use of the MD5 hash algorithm in certification path processing is restricted in the Oracle JRE. Applications using certificates signed with a MD5 hash algorithm should upgrade their certificates as soon as possible.<br />
<br />Note that this is a behavior change of the Oracle JRE. It is not guaranteed that the security property (jdk.certpath.disabledAlgorithms) is examined and used by other JRE implementations.<br />
JDK-8030829 (not public) <br />
<br />
<br />
<br /><span style="font-family: Courier New">security-libs/javax.net.ssl</span><br />
<strong>Increase the priorities of GCM cipher suites</strong><br />In TLS, a ciphersuite defines a specific set of cryptography algorithms used in a TLS connection. JSSE maintains a prioritized list of ciphersuites. In this update, GCM-based cipher suites are configured as the most preferable default cipher suites in the SunJSSE provider.<br />
<br />In the SunJSSE provider, the following ciphersuites are now the most preferred by default:<br />
<br />TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256<br />
<br />TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_256_GCM_SHA384 TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 TLS_DHE_DSS_WITH_AES_256_GCM_SHA384<br />
<br />TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 TLS_RSA_WITH_AES_128_GCM_SHA256 TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 TLS_DHE_DSS_WITH_AES_128_GCM_SHA256<br />
<br />Note that this is a behavior change of the SunJSSE provider in the JDK, it is not guaranteed to be examined and used by other JSSE providers. There is no guarantee the cipher suites priorities will remain the same in future updates or releases.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8028518">JDK-8028518</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.rmi</span><br />
<strong>rmic -Xnew option is disabled</strong><br />The -Xnew option to rmic, has been disabled for this release<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8146299">JDK-8146299</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
client-libs/java.awt</span><br />
<strong>Some platforms may not support showing the user-specified title in a file dialog.</strong><br />There are some platforms like Mac OS X 10.11 that may not support showing the user-specified title in a file dialog.<br />
<br />The following description is added to the to the java.awt.FileDialog class constructors and setTitle(String) method: &quot;Note: Some platforms may not support showing the user-specified title in a file dialog. In this situation, either no title will be displayed in the file dialog's title bar or, on some systems, the file dialog's title bar will not be displayed&quot;.<br />
JDK-8138674 (not public) <br />
<br />

<br /><span style="font-family: Courier New">
hotspot/svc</span><br />
<strong>'jsadebugd' command has been replaced by 'jhsdb debugd' command.</strong><br />The <strong>jsadebugd</strong> command to start remote debug server can now be launched from the common SA launcher <strong>jhsdb</strong> .<br />
<br />The new command to start remote debug server is <strong>jhsdb debugd</strong> .<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8160817">JDK-8160817</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.nio</span><br />
<strong>CharArrayReader, PushbackReader, and StringReader may now block in close()</strong><br />The <code>java.io</code> classes <code>CharArrayReader</code>, <code>PushbackReader</code>, and <code>StringReader</code> might now block in <code>close()</code> if there is another thread holding the <code>Reader.lock</code> lock.<br />
<br />The <code>read()</code> method of these classes could previously throw a <code>NullPointerException</code> if the internal state of the instance had become inconsistent. This was caused by a race condition due to <code>close()</code> not obtaining a lock before modifying the internal state of the <code>Reader</code>. This lock is now obtained which can result in <code>close()</code> blocking if another thread simultaneously holds the same lock on the <code>Reader</code>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8143394">JDK-8143394</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.nio</span><br />
<strong>java.nio.channels.FileLock constructors don't throw NPE if the channel argument is null</strong><br />The <code>java.nio.channels.FileLock</code> constructors will now throw a <code>NullPointerException</code> if called with a <code>null</code> <code>Channel</code> parameter. To avoid an unexpected behavior change, subclasses of FileLock should therefore ensure that the <code>Channel</code> they pass to the superclass constructor is non-<code>null</code>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-6880737">JDK-6880737</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-libs/java.util</span><br />
<strong>Default locale in java.util.Formatter related classes.</strong><br />The specification of the default locales used in Formatter related classes has been clarified to designate the default locale for formatting (Locale.Category.FORMAT).<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8146156">JDK-8146156</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.util:i18n</span><br />
<strong>SPI based locale sensitive services need to be explicitly specified</strong><br />The default locale data provider lookup does not load SPI based locale sensitive services. If it is needed, the system property &quot;java.locale.providers&quot; needs to designate &quot;SPI&quot; explicitly. For more detail, refer to <a href="http://download.java.net/java/jdk9/docs/api/java/util/spi/LocaleServiceProvider.html">LocaleServiceProvider</a>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8138613">JDK-8138613</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-libs/java.util:collections</span><br />
<strong>List.spliterator should optimize for RandomAccess lists</strong><br />Previously the default implementation of <code>List.spliterator</code> derived a <code>Spliterator</code> from the <code>List</code>'s iterator, which is poorly splitting and that affects the performance of a parallel stream returned by <code>List.parallelStream</code>. The default implementation of <code>List.spliterator</code> now returns an optimal splitting <code>Spliterator</code> implementation for <code>List</code> implementations that implement <code>java.util.RandomAccess</code>. As a result parallel stream performance may be improved for third-party <code>List</code> implementations, such as those provided by Eclipse collections, that do not override <code>List.spliterator</code> for compatibility across multiple major versions of the Java platform. This enhancement is a trade-off. It requires that the <code>List.get</code> method, of such lists implementing <code>RandomAccess</code>, have no side-effects, ensuring safe concurrent execution of the method when parallel stream pipeline is executed.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8158365">JDK-8158365</a> <br />
<br />
<br />




<br /><span style="font-family: Courier New">
hotspot/gc</span><br />
<strong>Use Unified Logging for the GC logging</strong><br />The logging for all garbage collectors in HotSpot have been changed to make use of a new logging framework that is configured through the <code>-Xlog</code> command line option. The command line flags <code>-XX:+PrintGC, -XX:+PrintGCDetails</code> and <code>-Xloggc</code> have been deprecated and will likely be removed in a future release. They are currently mapped to similar <code>-Xlog</code> configurations. All other flags that were used to control garbage collection logging have been removed. See the documentation for <code>-Xlog</code> for details on how to now configure and control the logging. These are the flags that were removed:<br />
<br /><code>CMSDumpAtPromotionFailure</code>, <code>CMSPrintEdenSurvivorChunks</code>, <code>G1LogLevel</code>, <code>G1PrintHeapRegions</code>, <code>G1PrintRegionLivenessInfo</code>, <code>G1SummarizeConcMark</code>, <code>G1SummarizeRSetStats</code>, <code>G1TraceConcRefinement</code>, <code>G1TraceEagerReclaimHumongousObjects</code>, <code>G1TraceStringSymbolTableScrubbing</code>, <code>GCLogFileSize</code>, <code>NumberOfGCLogFiles</code>, <code>PrintAdaptiveSizePolicy</code>, <code>PrintClassHistogramAfterFullGC</code>, <code>PrintClassHistogramBeforeFullGC</code>, <code>PrintCMSInitiationStatistics</code>, <code>PrintCMSStatistics</code>, <code>PrintFLSCensus</code>, <code>PrintFLSStatistics</code>, <code>PrintGCApplicationConcurrentTime</code>, <code>PrintGCApplicationStoppedTime</code>, <code>PrintGCCause</code>, <code>PrintGCDateStamps</code>, <code>PrintGCID</code>, <code>PrintGCTaskTimeStamps</code>, <code>PrintGCTimeStamps</code>, <code>PrintHeapAtGC</code>, <code>PrintHeapAtGCExtended</code>, <code>PrintJNIGCStalls</code>, <code>PrintOldPLAB</code>, <code>PrintParallelOldGCPhaseTimes</code>, <code>PrintPLAB</code>, <code>PrintPromotionFailure</code>, <code>PrintReferenceGC</code>, <code>PrintStringDeduplicationStatistics</code>, <code>PrintTaskqueue</code>, <code>PrintTenuringDistribution</code>, <code>PrintTerminationStats</code>, <code>PrintTLAB</code>, <code>TraceDynamicGCThreads</code>, <code>TraceMetadataHumongousAllocation</code>, <code>UseGCLogFileRotation</code>, <code>VerifySilently</code><br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8145092">JDK-8145092</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
core-libs/java.util:i18n</span><br />
<strong>Provide a better migration path for ResourceBundleControlProvider</strong><br />In releases through JDK 8, SPI implementations of java.util.spi.ResourceBundleControlProvider were loaded using Java Extension Mechanism. In JDK 9, this mechanism is no longer available. Instead, SPI implementations may be placed on an application's class path.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8172365">JDK-8172365</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.lang:reflect</span><br />
<strong>Executable.getAnnotatedReceiverType() is sensitive to the kind of Executable</strong><br />The behavior of <code>getAnnotatedReceiverType()</code> has been clarified to return an empty AnnotatedType object only for a method/constructor which could conceptually have a receiver parameter but does not have one at present. (Since there is no receiver parameter, there are no annotations to return.) In addition, the behavior of getAnnotatedReceiverType() has been clarified to return null for a method/constructor which cannot ever have a receiver parameter (and therefore cannot have annotations on the type of a receiver parameter): static methods, and constructors of non-inner classes. Incompatibility: Behavioral<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8044629">JDK-8044629</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
tools</span><br />
<strong>extcheck tool removed</strong><br />The <code>extcheck</code> tool has been removed in this release.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8042888">JDK-8042888</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>Change in SecureRandom Thread Safety</strong><br /><code>SecureRandom</code> objects are safe for use by multiple concurrent threads. A <code>SecureRandom</code> service provider can advertise that it is thread-safe by setting the service provider attribute &quot;ThreadSafe&quot; to &quot;true&quot; when registering the provider. Otherwise, the <code>SecureRandom</code> class will synchronize access to the following <code>SecureRandomSpi</code> methods: <code>SecureRandomSpi.engineSetSeed(byte[])</code>, <code>SecureRandomSpi.engineNextBytes(byte[])</code>, <code>SecureRandomSpi.engineNextBytes(byte[], SecureRandomParameters)</code>, <code>SecureRandomSpi.engineGenerateSeed(int)</code>, and <code>SecureRandomSpi.engineReseed(SecureRandomParameters)</code>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-7004967">JDK-7004967</a> <br />
<br />
<br />



<br /><span style="font-family: Courier New">
core-libs/java.lang</span><br />
<strong>java.lang.ref.Reference.enqueue method clears the reference object before enqueuing</strong><br /><code>java.lang.ref.Reference.enqueue</code> method clears the reference object before it is added to the registered queue. When the <code>enqueue</code> method is called, the referent is cleared and <code>get()</code> method will return null in JDK 9.<br />
<br />Typically when a reference object is enqueued, it is expected that the referent is no longer referenced and is cleared explicitly via the <code>clear</code> method to avoid memory leak. In other words the <code>get</code> method is expected not to be called in common cases once the <code>enqueue</code>method is called. In the case when the <code>get</code> method from an enqueued reference object and existing code attempts to access members of the referent object, <code>NullPointerException</code> may be thrown. Such code will need to be updated.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8175797">JDK-8175797</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.util:i18n</span><br />
<strong>Locale sensitive SPI and Input Method SPI implementations are now loaded from application's classpath</strong><br />Up through JDK 8, SPI implementations of java.awt.im.spi, java.text.spi, and java.util.spi packages are loaded using Java Extension Mechanism. In JDK 9, this mechanism is no longer available. Instead, SPI implementations may be placed on an application's classpath.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8062588">JDK-8062588</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.lang</span><br />
<strong>Spec update of ClassLoader.getResourceXXXXX() @throws NPE</strong><br />The spec of the following <code>java.lang.ClassLoader</code> methods for locating a resource by name are updated to throw <code>NullPointerException</code> when the specified name is null:<br />
<pre><code>  getResource(String)   getResourceAsStream(String)   getResources(String) </code></pre>
<br />Custom class loader implementations that override these methods should be updated accordingly to conform to this spec.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8136831">JDK-8136831</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
client-libs/2d</span><br />
<strong>Value of java.awt.font.OpenType.TAG_OPBD is incorrect</strong><br />The value of the static final int field <code>java.awt.font.OpenType.TAG_OPBD</code> was incorrect<br />
<br />It was erroneously using the same value as <code>TAG_MORT</code> <code>0x6D6F7274UL</code> and it has been changed to the correct <code>0x6F706264UL</code><br />
<br />Although this is strictly an incompatible binary change the likelihood of any practical impact on applications is near zero. The opbd table is used only in AAT fonts: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6opbd.html and as such is likely to be extremely rare in the wild as they are natively understood only by MacOS and iOS. This table is not critical to rendering of text by Java or anything else. As such nothing goes looking for the table and nothing inside JDK utilises any part of this class.<br />
<br />Nor does the JDK provide anyway at all to utilise these values directly - no Java API exists that accepts them. The class will not become useful without additional Java API that has not been added to date.<br />
<br />Even if an application were to use it by passing the Java field's value to some custom native code to look up a table then it is likely to return &quot;null&quot; both before and afterward since<br />
<ol>
    <li>the opbd table is extremely rare.</li>
    <li>the &quot;mort&quot; table that the old value located is already replaced in all fonts on OSX by the &quot;morx&quot; table.</li>
</ol>
<br />A representative sampling of 6 OS X fonts found none of them to have either table<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8077584">JDK-8077584</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
security-libs/org.ietf.jgss:krb5</span><br />
<strong>rcache interop with krb5-1.15</strong><br />The hash algorithm used in the Kerberos 5 replay cache file (rcache) is updated from MD5 to SHA256 with this change. This is also the algorithm used by MIT krb5-1.15. This change is interoperable with earlier releases of MIT krb5, which means Kerberos 5 acceptors from JDK 9 and MIT krb5-1.14 can share the same rcache file.<br />
<br />A new system property named jdk.krb5.rcache.useMD5 is introduced. If the system property is set to &quot;true&quot;, JDK 9 will still use the MD5 hash algorithm in rcache. This is useful when both of the following conditions are true: 1) the system has a very coarse clock and has to depend on hash values in replay attack detection, and 2) interoperability with earlier versions of JDK for rcache files is required. The default value of this system property is &quot;false&quot;.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8168518">JDK-8168518</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
hotspot/runtime</span><br />
<strong>VM Options AdaptiveSizePausePolicy and ParallelGCRetainPLAB are obsolete</strong><br />The VM Options <code>-XX:AdaptiveSizePausePolicy</code> and <code>-XX:ParallelGCRetainPLAB</code> are obsolete in JDK 9 and are ignored. Use of these options will result in a warning being issued in JDK 9 and they may be removed completely in a future release.<br />
<br />The VM Option <code>-XX:AdaptiveSizePausePolicy</code> has been unused for some time.<br />
<br />The VM Option <code>-XX:ParallelGCRetainPLAB</code> was a diagnostic flag relating to garbage collector combinations that no longer exist.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8073861">JDK-8073861</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
infrastructure</span><br />
<strong>Value of OS_NAME and OS_ARCH property in `release` changed</strong><br />The value of the <code>OS_NAME</code> and <code>OS_ARCH</code> property in the <code>release</code> file (top-level directory of the run-time image) have changed as follows:<br />
<pre>
            JDK 8            JDK 9
            -----            -----
OS_NAME     Linux            linux
            SunOS            solaris
            Darwin           macos
            Windows          windows
 
OS_ARCH     i386,x86         x86
            amd64,x86_64     amd64
            sparcv9          sparcv9
            arm              arm
            aarch64          aarch64
</pre>
<br />Scripts or tools that read the <code>release</code> file may need to be updated to handle the new value.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8175819">JDK-8175819</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
hotspot/runtime</span><br />
<strong>JNIDetachReleasesMonitors is obsolete</strong><br />The <code>-XX:-JNIDetachReleasesMonitors</code> flag requested that the VM run in a pre-JDK 6 compatibility mode with regard to not releasing monitors when a JNI attached thread detaches. This option is obsolete in JDK 9, and is ignored, as the VM always conforms to the JNI Specification and releases monitors. Use of this option will result in a warning being issued in JDK 9 and it may be removed completely in a future release.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8131045">JDK-8131045</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/javax.xml.crypto</span><br />
<strong>The XML Digital Signature API (javax.xml.crypto and subpackages) has been enhanced to better support generics</strong><br />The XML Digital Signature APIs (the <code>javax.xml.crypto</code> package and subpackages) have been enhanced to better support Generics, as follows:<br />
<ul>
    <li>all <code>Collection</code> and <code>Iterator</code> parameters and return types have been changed to parameterized types</li>
    <li>the <code>javax.xml.crypto.NodeSetData</code> interface has been changed to a generic type that implements <code>Iterable</code> so that it can be used in for-each loops</li>
</ul>

See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8046949">JDK-8046949</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
tools/javadoc(tool)</span><br />
<strong>Compact javadoc display of single-element annotations</strong><br />Previously javadoc would include &quot;value=&quot; when displaying annotations even when that text was not necessary in the source because the annotations were of single-element annotation type (JLS 9.6. Annotation Type Elements ). The extraneous &quot;value=&quot; text is now omitted, leading to more concise annotation display.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-6469562">JDK-6469562</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
xml/javax.xml.transform</span><br />
<strong>XSLT stylesheets with erroneously placed import elements are now rejected</strong><br />In accordance with XSL Transformations (XSLT) Version 1.0 (http://www.w3.org/TR/xslt), the <code>xsl:import</code> element is only allowed as a top-level element. The <code>xsl:import</code> element children must precede all other element children of an <code>xsl:stylesheet</code> element, including any <code>xsl:include</code> element children.<br />
<br />The JDK implementation has previously allowed the <code>xsl:import</code> element erroneously placed anywhere in a stylesheet. This issue has been fixed in the JDK 9 release. The JDK implementation now rejects any XSLT stylesheets with erroneously placed import elements.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8058152">JDK-8058152</a> <br />
<br />
<br />

<span style="font-family: Courier New">core-libs/java.util</span><br />
<strong>java.util.UUID#fromString(String) now throws IllegalArgumentException if the parameter is too long</strong><br />As part of the fix for <a href="http://bugs.java.com/view_bug.do?bug_id=JDK-8006627">JDK-8006627</a>, a check of the <code>String</code> parameter of <code>java.util.UUID.fromString(String)</code> was added which will result in an <code>IllegalArgumentException</code> being thrown if the length of the parameter is greater than 36.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8006627">JDK-8006627</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-svc/javax.management</span><br />
<strong>JMX ObjectName optimized to reduce memory footprint</strong><br />JMX ObjectName class is refactored and 8 bytes of class member metadata was reduced.<br />
<br />Each instance size of JMX ObjectName in memory is 8 bytes less than JDK8 ObjectName instance.<br />
<br />A new restriction on domain name length is introduced. The domain name now is a case sensitive string of limited length. The domain name length limit is Integer.MAX_VALUE/4.<br />
JDK-8041565 (not public) <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-svc/java.lang.management</span><br />
<strong>com.sun.management package is part of jdk.management module</strong><br />New module jdk.management is created which contains com.sun.management and com.sun.management.internal packages.<br />
<br />Platform MBean which were solely defined in com.sun.management (e.g. HotspotDiagnosticMXBean) are moved to com.sun.management.internal in the jdk.management module.<br />
<br />Platform MBean which were defined in java.lang.management package and also had a com.sun.management extension (e.g. OperatingSystemMXBean) now have two concrete implementation classes: one in java.management module and one in jdk.management module. Which one is selected depend's on whether jdk.management is present or not in the image.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8042901">JDK-8042901</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.util</span><br />
<strong>Properties loadFromXML/storeToXML methods do not support all encodings</strong><br /><code>java.util.Properties</code> defines the <code>loadFromXML</code> and<code>storeToXML</code> methods for <code>Properties</code> stored in XML documents. XML specifications only require XML processors to read entities in UTF-8 and UTF-16 and the API docs for these methods only require an implementation to support UTF-8 and UTF-16. The implementation of these methods has changed in JDK 9 to use a smaller XML parser which may impact applications that have been using these methods with other encodings. The new implementation does not have support all encodings that the legacy implementation had support for, in particular it does not support UTF-32/UCS-4, IBM* or x-IBM-* encodings. For maximum portability, applications are encouraged to use UTF-8 and UTF-16.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8042889">JDK-8042889</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">other-libs/corba:idl</span><br />
<strong>orb.idl and ir.idl moved to include directory</strong><br /><code>orb.idl</code> and <code>ir.idl</code> have moved from the JDK <code>lib</code> directory to the <code>include</code> directory. Applications that use a CORBA IDL compiler in their build may need to change the include path from <code>$JAVA_HOME/lib</code> to <code>$JAVA_HOME/include</code>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8049389">JDK-8049389</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-svc/javax.management</span><br />
<strong>Define ConstructorParameters annotation type for MXBeans</strong><br />A new annotation @javax.management.ConstructorParameters in the java.management module is introduced.<br />
<br />The newly introduced annotation will be 1:1 copy of @java.beans.ConstructorProperties. Constructors annotated by @java.beans.ConstructorProperties will still be recognized and processed.<br />
<br />In case a constructor is annotated by both @javax.management.ConstructorParameters and @java.beans.ConstructorProperties only the @javax.management.ConstructorParameters will be used.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8139727">JDK-8139727</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
hotspot/runtime</span><br />
<strong>VM Options &quot;-Xoss&quot;, &quot;-Xsqnopause&quot;, &quot;-Xoptimize&quot; and &quot;-Xboundthreads&quot; are obsolete</strong><br />The VM Options &quot;-Xoss&quot;, &quot;-Xsqnopause&quot;, &quot;-Xoptimize&quot; and &quot;-Xboundthreads&quot; are obsolete in JDK 9 and are ignored. Use of these options will result in a warning being issued in JDK 9 and they may be removed completely in a future release.<br />
<br />The VM Options &quot;-Xoss&quot;, &quot;-Xsqnopause&quot;, &quot;-Xoptimize&quot; options were already silently ignored for a long time.<br />
<br />The VM Option &quot;-Xboundthreads&quot; was only needed on Solaris 8/9 (when using the T1 threading library).<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8078399">JDK-8078399</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.lang</span><br />
<strong>Change SecurityManager checkTopLevelWindow, checkSystemClipboard, checkAccessAwtEventQueueAccess to check AllPermission</strong><br />The deprecated <code>checkTopLevelWindow</code>, <code>checkSystemClipboard</code>, and <code>checkAccessAwtEventQueueAccess</code> in <code>java.lang.SecurityManager</code> have been changed to check <code>AllPermission</code>, they no longer check <code>AWTPermission</code>. Libraries that invoke these SecurityManager methods do to permission checks may require users of the library to change their policy files.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8029886">JDK-8029886</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
hotspot/compiler</span><br />
<strong>Emulate client build on platforms with reduced virtual address space</strong><br />The 32-bit Client VM was removed from linux-x86 and Windows. As a result, the <code>-client</code> flag is ignored with 32-bit versions of Java on this platform. The 32-bit Server VM is used instead. However, due to limited virtual address space on Windows in 32-bit mode, by default the Server VM emulates the behavior of the Client VM and only uses the C1 JIT compiler, Serial GC, 32Mb CodeCache. To revert to server mode, the flag <code>-XX:{+|-}TieredCompilation</code> can be used. On linux-x86 there is no Client VM mode emulation.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8166002">JDK-8166002</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
core-libs/java.lang.invoke</span><br />
<strong>invokedynamic implementation should not wrap Errors</strong><br />The <code>invokedynamic</code> byte code instruction is no longer specified by the Java Virtual Machine Specification to wrap any <code>Throwable</code> thrown during linking in <code>java.lang.invoke.BootstrapMethodError</code>, which is then thrown to the caller.<br />
<br />If during linking an instance of <code>Error</code>, or a subclass of, is thrown then that <code>Error</code> is no longer wrapped and is thrown directly to the caller. Any other instance of <code>Throwable</code>, or subclass of, is still wrapped in <code>java.lang.invoke.BootstrapMethodError</code>.<br />
<br />This change in behaviour ensures that errors such as <code>OutOfMemoryError</code> or <code>ThreadDeath</code> are thrown unwrapped and may be acted on or reported directly, thereby enabling more uniform replacement of byte code with an <code>invokedynamic</code> instruction whose call site performs the same functionality as the replaced byte code (and may throw the same errors).<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8166974">JDK-8166974</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-libs</span><br />
<strong>Exported elements referring to inaccessible types in java.naming</strong><br />The <code>javax.naming.CompoundName</code>, an extensible type, has a protected member, '<code>impl</code>' whose type, <code>javax.naming.NameImpl</code>, is package-private. This is a long standing issue where an inaccessible implementation type has mistakenly made its way into the public Java SE API.<br />
<br />The new <code>javac</code> lint option <code>javac -Xlint</code> helped identify this issue. In Java SE 9, this protected member has been removed from the public API.<br />
<strong>Compatibility:</strong>
<br />Since the type of the member is package-private it cannot be directly referenced by non-JDK code. The member type does not implement or extend any super type directly, therefore any non-JDK subtype of <code>javax.naming.CompoundName</code> could only refer to this member as Object. It is possible that such a subtype might invoke the <code>toString</code>, or any of <code>Object</code>'s methods on this member, or even synchronize on it. In such a case such subtypes of <code>javax.naming.CompoundName</code> will require updating.<br />
<strong>Source incompatible:</strong>
<br />Code making a static reference to the member will fail to compile, e.g. <code>error: impl has private access in CompoundName</code><br />
<strong>Binary incompatible:</strong>
<br />Previously compiled code executed with 9, accessing the member directly will fail, e.g. <code>java.lang.IllegalAccessError: tried to access field javax.naming.CompoundName.impl from class CompoundName$MyCompoundName</code><br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8167178">JDK-8167178</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.util.logging</span><br />
<strong>Loggers with handlers configured from the logging.properties configuration file will not be garbage collected until LogManager.reset is called.</strong><br />When a logger has a handler configured in the logging configuration file (using the <code>&lt;logger&gt;.handlers</code> property), a reference to that logger will be internally kept by the LogManager until <code>LogManager.reset()</code> is called, in order to ensure that the associated handlers are properly closed on reset. As a consequence, such loggers won't be garbage collected until <code>LogManager.reset()</code> is called. An application that needs to allow garbage collection of these loggers before reset is called can revert to the old behaviour by additionally specifying <code>&lt;logger&gt;.handlers.ensureCloseOnReset=false</code> in the logging configuration file. Note however that doing so will reintroduce the resource leak that <a href="http://bugs.java.com/view_bug.do?bug_id=JDK-8060132">JDK-8060132</a> is fixing. Such an application must therefore take the responsibility of keeping the logger alive as long as it is needed, and close any handler attached to it before the logger gets garbage collected. See LogManager API documentation for more details.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8060132">JDK-8060132</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>Disallow null values for Subject inputs</strong><br />Inputs to the javax.security.auth.Subject class now prohibit null values in the constructors and modification operations on the Principal and credential Set objects returned by Subject methods.<br />
<br />For the non-default constructor, the principals, pubCredentials, and privCredentials parameters may not be null, nor may any element within the Sets be null. A NullPointerException will be thrown if null values are provided.<br />
<br />For operations performed on Set objects returned by getPrincipals(), getPrivateCredentials() and getPublicCredentials(), a NullPointerException is thrown under the following conditions:<br />
<ul>
    <li>add(), remove(), or contains() uses a null parameter.</li>
    <li>addAll(), removeAll(), containsAll() or retainsAll() provides a Collection containing a null element.</li>
</ul>

See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8015081">JDK-8015081</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
docs/guides</span><br />
<strong>The JNI function DetachCurrentThread must tolerate pending exceptions</strong><br />The JNI function <code>DetachCurrentThread</code> has been added to the list of JNI functions that can safely be called with an exception pending. The HotSpot Virtual Machine has always supported this as it reports that the exception occurred in a similar manner to the default handling of uncaught exceptions at the Java level. Other implementations are not obligated to do anything with the pending exception.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8155881">JDK-8155881</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>New default -sigalg for jarsigner and keytool</strong><br />Default signature algorithms for jarsigner and keytool are determined by both the algorithm and the key size of the private key which makes use of comparable strengths as defined in Tables 2 and 3 of <a href="http://dx.doi.org/10.6028/NIST.SP.800-57pt1r4">NIST SP 800-57 Part 1-Rev.4</a>. Specifically, for a DSA or RSA key with a key size greater than 7680 bits, or an EC key with a key size greater than or equal to 512 bits, SHA-512 will be used as the hash function for the signature algorithm. For a DSA or RSA key with a key size greater than 3072 bits, or an EC key with a key size greater than or equal to 384 bits, SHA-384 will be used. Otherwise, SHA-256 will be used. The value may change in the future.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8138766">JDK-8138766</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-libs/java.lang</span><br />
<strong>Phantom references are automatically cleared as soft and weak references</strong><br />This enhancement changes phantom references to be automatically cleared by the garbage collector as soft and weak references.<br />
<br />An object becomes phantom reachable after it has been finalized. This change may cause the phantom reachable objects to be GC'ed earlier - previously the referent is kept alive until PhantomReference objects are GC'ed. This potential behavioral change might only impact existing code that would depend on PhantomReference being enqueued rather than when the referent be freed from the heap.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8071507">JDK-8071507</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
client-libs</span><br />
<strong>No longer possible to create System L&amp;F via reflection</strong><br />It has been observed that applications have been using reflection to create internal Swing L&amp;Fs - system L&amp;Fs such as The Windows L&amp;F Class.forName(&quot; com.sun.java.swing.plaf.windows.WindowsLookAndFeel&quot;)<br />
<br />These classes are internal to the JDK and applications should have always treated them as such. In JDK 9, the module system means that these classes are not visible to applications.<br />
<br />Applications which need to create a system L&amp;F must instead use the new method : javax.swing.UIManager.createLookAndFeel(String name);<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8136366">JDK-8136366</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>Fix denyAfter and usage types for security properties</strong><br />A new constraint named 'usage' has been added to the 'jdk.certpath.disabledAlgorithms' security property, that when set, restricts the algorithm if it is used in a certificate chain for the specified usage(s). Three usages are initially supported: 'TLSServer' for restricting authentication of TLS server certificate chains, 'TLSClient' for restricting authentication of TLS client certificate chains, and 'SignedJAR' for restricting certificate chains used with signed JARs. This should be used when disabling an algorithm for all usages is not practical. The usage type follows the keyword and more than one usage type can be specified with a whitespace delimiter. For example, to disable SHA1 for TLS server and client certificate chains, add the following to the property: &quot;SHA1 usage TLSServer TLSClient&quot;<br />
<br />The 'denyAfter' constraint has been added to the 'jdk.jar.disabledAlgorithms' security property. When set, it restricts the specified algorithm if it is used in a signed JAR after the specified date, as follows:<br />
<br />a. if the JAR is not timestamped, it will be restricted (treated as unsigned) after the specified date<br />
<br />b. if the JAR is timestamped, it will not be restricted if it is timestamped before the specified date.<br />
<br />For example, to restrict usage of SHA1 in jar files signed after January 1, 2018, add the following to the property: &quot;SHA1 denyAfter 2018-01-01&quot;.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8160655">JDK-8160655</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
deploy</span><br />
<strong>Deployment Tookit API methods no longer installs JRE</strong><br />The Deployment Toolkit API installLatestJRE() and installJRE(requestedVersion) methods from deployJava.js and install() method from dtjava.js no longer installs the JRE. If a user's version of Java is below the security baseline, it redirects the user to java.com to get an updated JRE.<br />
JDK-8148310 (not public) <br />
<br />
<br />
core-libs/java.util</span><br />
<strong>java.util.prefs.Preferences now disallows the use of any String containing the null control character</strong><br />The specification of the class <code>java.util.prefs.Preferences</code> was modified to disallow the use of any String containing the null control character, code point U+0000, in any String used as the key or value parameter in any of the abstract put*(), get*(), and remove methods. If such a character is detected, an <code>IllegalArgumentException</code> shall be thrown.<br />
<br />The specification of the class <code>java.util.prefs.AbstractPreferences</code> was modified according to the corresponding change in its superclass java.util.prefs.Preferences to disallow the use of any String containing the null control character, code point U+0000, in any String used as the key or value parameter in any of the put*(), get*(), and remove() method implementations. These method implementations were modified to throw an <code>IllegalArgumentException</code> upon encountering such a character in a key or value String in these contexts. Also, the class specification was modified to correct the erroneous reference to the flush() and sync() methods as returning a boolean value when they are in fact void.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8075156">JDK-8075156</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
tools/launcher</span><br />
<strong>The launcher no longer uses ergonomics to select the VM</strong><br />In previous releases, on platforms that supported more than one VM, the launcher could use ergonomics to select the Server VM over the Client VM. Ergonomics would identify a &quot;server-class&quot; machine based on the number of CPUs and the amount of memory. With modern hardware platforms most machines are identified as server-class, and so now, only the Server VM is provided on most platforms. Consequently the ergonomic selection is redundant and has been removed. Users are advised to use the appropriate launcher VM selection flag on those systems where multiple VMs still exist.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8169001">JDK-8169001</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.time</span><br />
<strong>The implementation of the clock returned by system factory methods in java.time.Clock has increased the resolution</strong><br />The Java SE 8 specification for <code>java.time.Clock</code> states that <em>''The system factory methods provide clocks based on the best available system clock. This may use <code>System.currentTimeMillis()</code>, or a higher resolution clock if one is available.''</em> In JDK 8 the implementation of the clock returned was based on <code>System.currentTimeMillis()</code>, and thus has only a millisecond resolution. In JDK 9, the implementation is based on the underlying native clock that <code>System.currentTimeMillis()</code> is using, providing the maximum resolution available from that clock. On most systems this can be microseconds, or sometimes even tenth of microseconds.<br />
<br />An application making the assumption that the clock returned by these system factory methods will always have milliseconds precision and actively depends on it, may therefore need to be updated in order to take into account the possibility of a greater resolution, as was stated in the API documentation. It is also worth noting that a new <code>Clock.tickMillis(zoneId)</code> method has been added to allow time to be obtained at only millisecond precision - see: <a href="http://download.java.net/java/jdk9/docs/api/java/time/Clock.html#tickMillis-java.time.ZoneId-">http://download.java.net/java/jdk9/docs/api/java/time/Clock.html#tickMillis-java.time.ZoneId-</a>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8068730">JDK-8068730</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.nio</span><br />
<strong>The SecurityException throws clauses of the java.nio.file.Files methods newBufferedWriter() and write() now indicate that the exception might arise from a &quot;delete&quot; permission check</strong><br />The sentence<br />
<br />&quot;The {@link SecurityManager#checkDelete(String) checkDelete} method is invoked to check delete access if the file is opened with the {@code DELETE_ON_CLOSE} option.&quot;<br />
<br />was appended to the verbiage of the SecurityException throws clause in the specifications of the newBufferedWriter() and write() methods of java.nio.file.Files.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8065109">JDK-8065109</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs</span><br />
<strong>JDK 9 supports CLDR version 29</strong><br />To track CLDR 29 Release note.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8145136">JDK-8145136</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
client-libs/javax.accessibility</span><br />
<strong>Three com.sun.java.accessibility.utils internal fields are now private</strong><br />Three static fields exposing event listener instances whose types are internal and intended use was internal are now made private. These are very unlikely to have been used by many applications as until recently they were shipped only as an unbundled component.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8167182">JDK-8167182</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
client-libs</span><br />
<strong>Restrict javax.imageio.spi.ServiceRegistry to ImageIO types</strong><br />Since Java SE 1.4 <code>javax.imageio.spi.ServiceRegistry</code> provided a facility roughly equivalent to the Java SE 1.6 <code>java.util.ServiceLoader</code>. This image i/o facility is now restricted to supporting SPIs defined as part of <code>javax.imageio</code>. Applications which use it for other purposes need to be re-coded to use <code>ServiceLoader</code>.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8068749">JDK-8068749</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
xml/jaxp</span><br />
<strong>Non Java SE DOM APIs moved to jdk.xml.dom module</strong><br />Before the Java SE 9 release, the DOM API package in <code>org.w3c.dom</code> included sub-packages that were not defined as a part of the Jave SE API. As of Java SE 9, these sub-packages are moved out of the <code>java.xml</code> module to a separate module called <code>jdk.xml.dom</code>. These packages are as follows:<br />
<pre><code>    org.w3c.dom.css     org.w3c.dom.html     org.w3c.dom.stylesheets     org.w3c.dom.xpath </code></pre>

See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8042244">JDK-8042244</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
tools/javadoc(tool)</span><br />
<strong>Omit public and abstract modifiers in javadoc for annotation type members</strong><br />Previously javadoc would emit &quot;public&quot; and &quot;abstract&quot; modifiers for methods and fields in annotation types. These flags are not needed in source code and are elided for non-annotation interface types. With this change, those modifiers are also omitted for methods and fields defined in annotation types.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-6469561">JDK-6469561</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.lang:reflect</span><br />
<strong>Updates to java.lang.reflect.Field.get(), Field.get{primitive}() and java.lang.reflect.Method.invoke()</strong><br />java.lang.reflect.Field.get(), Field.get{primitive}() and java.lang.reflect.Method.invoke() have been updated to use the primitive wrapper classes' valueOf() (for example Integer.valueOf()) instead of always creating new wrappers with &quot;new&quot; (for example new Integer()) after the reflection libraries have (potentially) optimised the Field/Method instance. This can affect applications that depended on two wrappers being != while still being .equals().<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-5043030">JDK-5043030</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/javax.net.ssl</span><br />
<strong>Restrict Diffie-Hellman keys less than 1024 bits</strong><br />Diffie-Hellman keys less than 1024 bits are considered too weak to use in practice and should be restricted by default in SSL/TLS/DTLS connections. Accordingly, Diffie-Hellman keys less than 1024 bits have been disabled by default by adding &quot;DH keySize &lt; 1024&quot; to the &quot;jdk.tls.disabledAlgorithms&quot; security property in the java.security file. Although it is not recommended, administrators can update the security property (&quot;jdk.tls.disabledAlgorithms&quot;) and permit smaller key sizes (for example, by setting &quot;DH keySize &lt; 768&quot;).<br />
JDK-8148108 (not public) <br />
<br />
<br />
<br /><span style="font-family: Courier New">
xml/jaxp</span><br />
<strong>Revamping the pretty print feature for Transformer and LSSerializer</strong><br />The JAXP library through the <code>Transformer</code> and <code>LSSerializer</code> supports a pretty print feature that can format the output by adding whitespaces and newlines to produce a more readable form of an XML document. As of the JDK 9 release, this feature has been enhanced to generate a format similar to that of the major web browsers. In addition, the <code>xml:space</code> attribute as defined in the XML specification (https://www.w3.org/TR/2006/REC-xml-20060816/#sec-white-space) is now supported.<br />
<br />The <code>Pretty-Print</code> feature does not define the actual format. The output format can change over time or vary from implementation to implementation, and therefore should not be relied on for exact text comparison. It is recommended that such applications turn off the <code>Pretty-Print</code> feature and perform an XML to XML comparison.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8087303">JDK-8087303</a> <br />
<br />
<br />


<br /><span style="font-family: Courier New">
xml/jaxp</span><br />
<strong>OOME caused by very large CDATA section in XML document can now be avoided</strong><br />An event-based XML parsers may return character data in chunks.<br />
<blockquote>
<br />SAX specification: states that SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks.<br />
</blockquote><blockquote>
<br />StAX specification: did not specify explicitly.<br />
</blockquote>
<br />The JDK implementation before JDK 9 returns all character data in a CData section in a single chunk by default. As of JDK 9, an implementation-only property <code>jdk.xml.cdataChunkSize</code> is added to instruct a parser to return the data in a CData section in a single chunk when the property is zero or unspecified, or in multiple chunks when it is greater than zero. The parser will split the data by linebreaks, and any chunks that are larger than the specified size to ones that are equal to or smaller than the size.<br />
<blockquote>
<br />The property <code>jdk.xml.cdataChunkSize</code> is supported through the following means:<br />
</blockquote>
<ol>
    <li>through the SAX or StAX API, that is <code>SAXParser</code> or <code>XMLReader</code> for SAX, and <code>XMLInputFactory</code> for StAX. If the property is set, its value will be used in preference over any of the other settings.</li>
    <li>as a system property. The value set in the system property will overwrite that in jaxp.properties, but may be overridden by the API setting above.</li>
    <li>in the <code>jaxp.properties</code> file. The value in <code>jaxp.properties</code> may be overridden by the system property or an API setting.</li>
</ol>
</div>
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8158619">JDK-8158619</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
security-libs/org.ietf.jgss:krb5</span><br />
<strong>sun.security.krb5.KdcComm interprets kdc_timeout as msec instead of sec</strong><br />An interoperability issue is found between Java and the native Kerberos implementation on BSD (including macOS) on the kdc_timeout setting in krb5.conf, where Java interpreted it as milliseconds and BSD as seconds when no unit is specified. This code change adds support for the &quot;s&quot; (second) unit. Therefore if the timeout is 5 seconds, Java accepts both &quot;5000&quot; and &quot;5s&quot;. Customers concerned about interoperability between Java and BSD should use &quot;5s&quot;.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8036779">JDK-8036779</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.util.logging</span><br />
<strong>A new configurable property in logging.properties java.util.logging.FileHandler.maxLocks</strong><br />A new &quot;java.util.logging.FileHandler.maxLocks&quot; configurable property is added to java.util.logging.FileHandler.<br />
<br />This new logging property can be defined in the logging configuration file and makes it possible to configure the maximum number of concurrent log file locks a FileHandler can handle. The default value is 100.<br />
<br />In a highly concurrent environment where multiple (more than 101) standalone client applications are using the JDK Logging API with FileHandler simultaneously, it may happen that the default limit of 100 is reached, resulting in a failure to acquire FileHandler file locks and causing an IO Exception to be thrown. In such a case, the new logging property can be used to increase the maximum number of locks before deploying the application.<br />
<br />If not overridden, the default value of maxLocks (100) remains unchanged. See java.util.logging.LogManager and java.util.logging.FileHandler API documentation for more details.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8153955">JDK-8153955</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
security-libs/java.security</span><br />
<strong>Default key sizes for the AlgorithmParameterGenerator and KeyPairGenerator implementations updated</strong><br />To improve security, the default key size for the RSA and DiffieHellman <code>KeyPairGenerator</code> implementations and the DiffieHellman <code>AlgorithmParameterGenerator</code> implementations has been increased from 1024 bits to 2048 bits. The default key size for the DSA <code>KeyPairGenerator</code> and <code>AlgorithmParameterGenerator</code> implementations remains at 1024 bits to preserve compatibility with applications that are using keys of that size with the SHA1withDSA signature algorithm.<br />
<br />With increases in computing power and advances in cryptography, the minimum recommended key size increases over time. Therefore, future versions of the platform may increase the default size.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8138653">JDK-8138653</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">
core-libs/java.util:collections</span><br />
<strong>Collections.asLifoQueue(null) now throws NPE as specified</strong><br />Before the JDK 9 release, invocation of the method Collections.asLifoQueue with a null argument value would not throw a NullPointerException as specified by the class documentation. Instead a NullPointerException would be thrown when operating on the returned Queue. The JDK 9 release corrects the implementation of Collections.asLifoQueue to conform to the specification. Behavioral compatibility is not preserved but it is expected that the impact will be minimal given analysis of existing usages.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8145006">JDK-8145006</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs</span><br />
<strong>Modified HttpURLConnection behavior when no suitable proxy is found</strong><br />The behavior of HttpURLConnection when using a ProxySelector has been modified with this JDK release. HttpURLConnection use to fall back to a DIRECT connection attempt if the configured proxy(s) failed to make a connection. This release introduces a change whereby no DIRECT connection will be attempted in such a scenario. Instead, the HttpURLConnection.connect() method will fail and throw an IOException which occurred from the last proxy tested.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8161016">JDK-8161016</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
core-libs/java.util.logging</span><br />
<strong>LogManager.readConfiguration will no longer propagate IllegalArgumentException directly when the logging configuration property file contains invalid unicode escape sequences.</strong><br /><code>LogManager.readConfiguration</code> calls <code>Properties.load</code>, which may throw <code>IllegalArgumentException</code> if it encounters an invalid unicode escape sequence in the input stream. In previous versions of the JDK, the IllegalArgumentException was simply propagated to the caller. This was however in violation of the specification, since <code>LogManager.readConfiguration</code> is not specified to throw <code>IllegalArgumentException</code>. Instead, it is specified to throw <code>IOException</code> <i>''if there are problems reading from the stream''</i>. In Java SE 9, <code>LogManager.readConfiguration</code> will no longer propagate such <code>IllegalArgumentException</code> directly, but will wrap it inside an <code>IOException</code> in order to conform to the specification.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8075810">JDK-8075810</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
<hr />
<a id="IssuesFixed-jdk9" name="IssuesFixed-jdk9"></a>
<h2>Issues Fixed</h2>
client-libs/javax.swing</span><br />
<strong>Trackpad scrolling of text on OS X 10.12 Sierra is very fast</strong><br />The <code>MouseWheelEvent.getWheelRotation()</code> method returned rounded native <code>NSEvent deltaX/Y</code> events on Mac OS X. The latest macOS Sierra 10.12 produces very small <code>NSEvent deltaX/Y</code> values so rounding and summing them leads to the huge value returned from the <code>MouseWheelEvent.getWheelRotation()</code>. The <a href="http://bugs.java.com/view_bug.do?bug_id=JDK-8166591">JDK-8166591</a> fix accumulates <code>NSEvent deltaX/Y</code> and the <code>MouseWheelEvent.getWheelRotation()</code> method returns non-zero values only when the accumulated value exceeds a threshold and zero value. This is compliant with the <code>MouseWheelEvent.getWheelRotation()</code> specification:<br />
<br /><a href="https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseWheelEvent.html#getWheelRotation--">https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseWheelEvent.html#getWheelRotation--</a><br />
<blockquote>
<br />Returns the number of &quot;clicks&quot; the mouse wheel was rotated, as an integer. A partial rotation may occur if the mouse supports a high-resolution wheel. In this case, the method returns zero until a full &quot;click&quot; has been accumulated.<br />
</blockquote>
<br />For the precise wheel rotation values, use the <code>MouseWheelEvent.getPreciseWheelRotation()</code> method instead.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8166591">JDK-8166591</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
tools/javac</span><br />
<strong>implement eager resolution of return types</strong><br />The compiler specification, see JLS8 18.5.2, modified the treatment of nested generic method invocations for which the return type is an inference variable. The compiler has been adapted to implement the new logic. This is important to minimize incompatibility with the javac 7 inference algorithm. Three cases are considered:<br />
<ul>
    <li>The return type needs to be captured</li>
    <li>The return type needs to have unchecked conversion</li>
    <li>The return type needs to be unboxed</li>
</ul>
<br />The compiler update implies an eager resolution for generic method invocations, provided that the return type is an inference variable.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8030741">JDK-8030741</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">
tools/javac</span><br />
<strong>several incorporation steps are silently failing when an error should be reported</strong><br />Reporting previously silent errors found during incorporation, JLS 8 &sect;18.3, was supposed to be a clean-up with performance only implications. But consider the test case:<br />
<pre><code>import java.util.Arrays; import java.util.List;   class Klass {     public static &lt;A&gt; List&lt;List&lt;A&gt;&gt; foo(List&lt;? extends A&gt;... lists) {         return foo(Arrays.asList(lists));     }       public static &lt;B&gt; List&lt;List&lt;B&gt;&gt; foo(List&lt;? extends List&lt;? extends B&gt;&gt; lists) {         return null;     } } </code></pre>
<br />This code was not accepted before the patch for [1], but after this patch the compiler is accepting it. Accepting this code is the right behavior as not reporting incorporation errors was a bug in the compiler.<br />
<br />While determining the applicability of method:<br />
<pre><code>&lt;B&gt; List&lt;List&lt;B&gt;&gt; foo(List&lt;? extends List&lt;? extends B&gt;&gt; lists) </code></pre>
<br />For which we have the constraints:<br />
<pre><code>b &lt;: Object t &lt;: List&lt;? extends B&gt; t&lt;: Object List&lt;? extends A&gt; &lt;: t </code></pre>
<br />First, inference variable b is selected for instantiation:<br />
<pre><code>b = CAP1 of ? extends A </code></pre>
<br />so this implies that:<br />
<pre><code>t &lt;: List&lt;? extends CAP1 of ? extends A&gt; t&lt;: Object List&lt;? extends A&gt; &lt;: t </code></pre>
<br />Now all the bounds are checked for consistency. While checking if List&lt;? extends A&gt; is a subtype of List&lt;? extends CAP1 of ? extends A&gt; a bound error is reported. Before the compiler was just swallowing it. As now the error is reported while inference variable b is being instantiated, the bound set is rolled back to it's initial state, 'b' is instantiated to Object, and with this instantiation the constraint set is solvable, the method is applicable, it's the only applicable one and the code is accepted as correct. The compiler behavior in this case is defined at JLS 8 &sect;18.4<br />
<br />This fix has source compatibility impact, right now code that wasn't being accepted is now being accepted by the javac compiler. Currently there are no reports of any other kind of incompatibility.<br />
<br />[1] [https://bugs.openjdk.java.net/browse/<a href="http://bugs.java.com/view_bug.do?bug_id=JDK-8078024">JDK-8078024</a>](https://bugs.openjdk.java.net/browse/<a href="http://bugs.java.com/view_bug.do?bug_id=JDK-8078024">JDK-8078024</a>)<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8078024">JDK-8078024</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/compiler</span><br />
<strong>Interpreter and compiled code process signaling NaN values inconsistently in 32-bit x86 VM</strong><br />The IEEE 754 standard distinguishes between signaling and quiet NaNs. When executing floating point operations, some processors silently convert signaling NaNs to quiet NaNs. The 32-bit x86 version of the HotSpot JVM allows silent conversions to happen. With JVM releases preceding JDK 9, silent conversions happen depending on whether the floating point operations are part of compiled or interpreted code. With the JDK 9 release, interpreted and compiled code behaves consistently with respect to signaling and quiet NaNs.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8076373">JDK-8076373</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.lang:reflect</span><br />
<strong>for Annotation toString output not reusable for source input</strong><br />The exact toString output of an annotation is deliberately not specified; from java.lang.annotation.Annotation.toString():<br />
<br />Returns a string representation of this annotation. The details of the representation are implementation-dependent [...]<br />
<br />Previously, the toString format of an annotation did not output certain information in a way that would be usable for a source code representation of an annotation, string values were not surrounded by double quote characters, array values were surrounded by brackets (&quot;[]&quot;) rather than braces (&quot;{}&quot;), etc.<br />
<br />As a behavioral change, the annotation output has been updated to be faithful to a source code representation of the annotation.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8162817">JDK-8162817</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.util.logging</span><br />
<strong>java.util.logging.FormatterformatMessage API specification has been clarified, and its implementation fixed.</strong><br /><code>java.util.logging.Formatter.formatMessage</code> API specification specified that <code>MessageFormat</code> would be called if the message string contained &quot;{0&quot;. In practice <code>MessageFormat</code> was called if the message string contained either &quot;{0&quot;, &quot;{1&quot;, &quot;{2&quot; or &quot;{3&quot;.<br />
<br />In Java SE 9, the specification and implementation of this method have been changed to call <code>MessageFormat</code> if the message string contains &quot;{<i>&lt;digit&gt;</i>&quot;, where <i>&lt;digit&gt;</i> is in [0..9].<br />
<br />In practice, this should be transparent for calling applications.<br />
<br />The only case where an application might see a behaviour change is if the application passes a format string that does not contain any formatter of the form &quot;{0&quot;, &quot;{1&quot;, &quot;{2&quot; or &quot;{3&quot;, but contains &quot;{<i>&lt;digit&gt;</i>&quot; with <i>&lt;digit&gt;</i> within [4..9], along with an array of parameters that contains at least <i>&lt;digit&gt;</i>+1 elements, and depends on <code>MessageFormat</code> not to be called. In that case the method will return a formatted message instead of the format string.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8153666">JDK-8153666</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">hotspot/compiler</span><br />
<strong>Compilers accept modification of final fields outside initializer methods</strong><br />According to the Java VM Specification, final fields can be modified by the <code>putfield</code> byte code instruction only if the instruction appears in the instance initializer method <code>&lt;init&gt;</code> of the field's declaring class. Similar, static final fields can be modified by a <code>putstatic</code> instruction only if the instruction appears in the class initializer method <code>&lt;clinit&gt;</code> of the field's declaring class. With the JDK 9 release, the HotSpot VM fully enforces the previously mentioned restrictions, but only for class files with version number &gt;= 53. For class files with version numbers &lt; 53, restrictions are only partially enforced (as it is done by releases preceding JDK 9). That is, for class files with version number &lt; 53 final fields can be modified in any method of the class declaring the field (not only class/instance initializers).<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8157181">JDK-8157181</a> <br />
<br />
<br />

<br /><span style="font-family: Courier New">tools/javac</span><br />
<strong>missing error in qualified default super call</strong><br />Javac was not in sync with <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.12.1">JLS 8 &sect;15.12.1</a>, specifically:<br />
<br />If the form is TypeName . super . [TypeArguments] Identifier, then: ...<br />
<ul>
    <li>Otherwise, TypeName denotes the interface to be searched, I.</li>
</ul>
<br />Let T be the type declaration immediately enclosing the method invocation. It is a compile-time error if I is not a direct superinterface of T, or if there exists some other direct superclass or direct superinterface of T, J, such that J is a subtype of I.<br />
<br />So javac was not issuing a compiler error for cases like:<br />
<pre><code>interface I {     default int f(){return 0;} }   class J implements I {}   class T extends J implements I {     public int f() {         return I.super.f();     } } </code></pre>
<br />The compiler had some checks for method invocations of the form:<br />
<br /><code>TypeName . super . [TypeArguments] Identifier</code><br />
<br />but there was one issue. If <code>TypeName</code> is an interface <code>I</code> and <code>T</code> is the type declaration immediately enclosing the method invocation, the compiler must issue a compile-time error if there exists some other direct superclass or superinterface of <code>T</code>, let's call it <code>J</code> such that <code>J</code> is a subtype of <code>I</code>, as in the example above.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8058244">JDK-8058244</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.util.jar</span><br />
<strong>java.util.zip.ZipFile.getEntry() now always returns the ZipEntry instance with a '/' ended entry name for directory entry</strong><br />java.util.zip.ZipEntry API doc specifies <em>&quot;A directory entry is defined to be one whose name ends with a '/'&quot;</em>. However, in previous JDK releases java.util.zip.ZipFile.getEntry(String <em>entryName</em>) may return a ZipEntry instance with an entry name that does not end with '/' for an existing zip directory entry when the passed in argument <em>entryName</em> does not end with a <em>'/'</em> and there is a matching zip directory entry with name <em>entryName + '/'</em> in the zip file. With JDK 9 the name of the ZipEntry instance returned from java.util.zip.ZipFile.getEntry() always ends with <em>'/'</em> for any zip directory entry.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-6233323">JDK-6233323</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">core-libs/java.lang:class_loading</span><br />
<strong>Empty element in -Xbootclasspath/a will be skipped.</strong><br />An empty element specified in -Xbootclasspath/a is skipped by the bootstrap class loader. This change might impact existing code that relies on an empty element in the boot class path to find resources in the current working directory. Such application will need to set the directory containing the resources be searched by the bootstrap class loader properly via -Xbootclasspath/a option.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-6760902">JDK-6760902</a> <br />
<br />
<br />
<br /><span style="font-family: Courier New">client-libs/javax.swing</span><br />
<strong>Closing the ProgressMonitor dialog</strong><br />
The ProgressMonitor dialog can be closed in following ways :<br />
<ol>
    <li>'Cancel' button is pressed</li>
    <li>Dialog Close button is pressed</li>
    <li>Escape key is pressed</li>
</ol>
<br />If the ProgressMonitor dialog is closed, ProgressMonitor.isCanceled() method used to return 'true' in only cases (1) and (2) above. This fix corrects the behavior where ProgressMonitor.isCanceled() method will return 'true' in case the ProgressMonitor dialog is closed by pressing Escape key.<br />
<br />There is low compatibility impact of this fix : This change may impact user code that (incorrectly) assumes ProgressMonitor.isCanceled() will return false even if the ProgressMonitor dialog is closed as a result of pressing Escape key. Also, with this change, now there is no way to get the ProgressMonitor dialog out of way whilst having progress continue.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8065861">JDK-8065861</a> <br />
<br />
<br />

<a id="KnownIssues-jdk9" name="KnownIssues-jdk9"></a>
<h2>Known Issues</h2>
<br /><span style="font-family: Courier New">core-libs/java.net</span><br />
<strong>HttpCookie parsing only works for response cookie headers</strong><br />
The current implementation of <code>java.net.HttpCookie</code> can only be used to parse cookie headers generated by a server and sent in a HTTP response as a <code>Set-Cookie</code> or <code>Set-Cookie2</code> header, and does not support parsing of client generated cookie headers.<br />
<br />
This is not completely clear from the API documentation of that class. The documentation could be updated to make the current behavior clearer, or preferably, the implementation could be updated to support both behaviors in a future release.<br />
See <a target="_BLANK" href="http://bugs.java.com/view_bug.do?bug_id=JDK-8129622">JDK-8129622</a> <br />
<br />




</body>
</html>
